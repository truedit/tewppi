<?php
/**
 * OutputTypeApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;

/**
 * OutputTypeApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutputTypeApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Operation fetchOutputTypesUsingGET
     *
     * Fetches all OutputTypes
     *
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @param \DateTime $if_modified_since  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseOutputTypeV1TO_
     */
    public function fetchOutputTypesUsingGET($x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null)
    {
        list($response) = $this->fetchOutputTypesUsingGETWithHttpInfo($x_api_key, $x_app_api_key, $accept_language, $if_modified_since);
        return $response;
    }

    /**
     * Operation fetchOutputTypesUsingGETWithHttpInfo
     *
     * Fetches all OutputTypes
     *
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @param \DateTime $if_modified_since  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseOutputTypeV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchOutputTypesUsingGETWithHttpInfo($x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null)
    {
        // parse inputs
        $resourcePath = "/1/outputType";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }

        if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseOutputTypeV1TO_',
                '/1/outputType'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseOutputTypeV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseOutputTypeV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
