<?php
/**
 * JobV1TO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * JobV1TO Class Doc Comment
 *
 * @category    Class
 * @description Describes a Job.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobV1TO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JobV1TO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assigned_to_groups' => '\Swagger\Client\Model\ReferenceV1TO[]',
        'assigned_to_users' => '\Swagger\Client\Model\ReferenceV1TO[]',
        'assignee_last_modified' => 'int',
        'can_edit_permissions' => 'bool',
        'check_out_by' => '\Swagger\Client\Model\ReferenceV1TO',
        'checkout_context_identifier' => 'string',
        'cmdvalues' => '\Swagger\Client\Model\CMDValueV1TO[]',
        'deleted_by' => '\Swagger\Client\Model\ReferenceV1TO',
        'deleted_on' => 'int',
        'external_identifier' => 'string',
        'has_sub_jobs' => 'bool',
        'id' => 'int',
        'job_path' => '\Swagger\Client\Model\ReferenceV1TO[]',
        'last_log_entry' => '\Swagger\Client\Model\JobLogEntryV1TO',
        'last_modified' => 'int',
        'name' => 'string',
        'placed_jobs' => '\Swagger\Client\Model\PlacedJobV1TO[]',
        'profile' => '\Swagger\Client\Model\ReferenceV1TO',
        'relink_children' => 'bool',
        'remove_on' => 'int',
        'revision_creator_version' => 'string',
        'revision_number' => 'int',
        'status' => '\Swagger\Client\Model\ReferenceV1TO',
        'target_medias' => '\Swagger\Client\Model\ReferenceV1TO[]',
        'text_file_character_count' => 'string',
        'text_file_word_count' => 'string',
        'working_file' => '\Swagger\Client\Model\FileV1TO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assigned_to_groups' => null,
        'assigned_to_users' => null,
        'assignee_last_modified' => 'int64',
        'can_edit_permissions' => null,
        'check_out_by' => null,
        'checkout_context_identifier' => null,
        'cmdvalues' => null,
        'deleted_by' => null,
        'deleted_on' => 'int64',
        'external_identifier' => null,
        'has_sub_jobs' => null,
        'id' => 'int64',
        'job_path' => null,
        'last_log_entry' => null,
        'last_modified' => 'int64',
        'name' => null,
        'placed_jobs' => null,
        'profile' => null,
        'relink_children' => null,
        'remove_on' => 'int64',
        'revision_creator_version' => null,
        'revision_number' => 'int32',
        'status' => null,
        'target_medias' => null,
        'text_file_character_count' => null,
        'text_file_word_count' => null,
        'working_file' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'assigned_to_groups' => 'assignedToGroups',
        'assigned_to_users' => 'assignedToUsers',
        'assignee_last_modified' => 'assigneeLastModified',
        'can_edit_permissions' => 'canEditPermissions',
        'check_out_by' => 'checkOutBy',
        'checkout_context_identifier' => 'checkoutContextIdentifier',
        'cmdvalues' => 'cmdvalues',
        'deleted_by' => 'deletedBy',
        'deleted_on' => 'deletedOn',
        'external_identifier' => 'externalIdentifier',
        'has_sub_jobs' => 'hasSubJobs',
        'id' => 'id',
        'job_path' => 'jobPath',
        'last_log_entry' => 'lastLogEntry',
        'last_modified' => 'lastModified',
        'name' => 'name',
        'placed_jobs' => 'placedJobs',
        'profile' => 'profile',
        'relink_children' => 'relinkChildren',
        'remove_on' => 'removeOn',
        'revision_creator_version' => 'revisionCreatorVersion',
        'revision_number' => 'revisionNumber',
        'status' => 'status',
        'target_medias' => 'targetMedias',
        'text_file_character_count' => 'textFileCharacterCount',
        'text_file_word_count' => 'textFileWordCount',
        'working_file' => 'workingFile'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'assigned_to_groups' => 'setAssignedToGroups',
        'assigned_to_users' => 'setAssignedToUsers',
        'assignee_last_modified' => 'setAssigneeLastModified',
        'can_edit_permissions' => 'setCanEditPermissions',
        'check_out_by' => 'setCheckOutBy',
        'checkout_context_identifier' => 'setCheckoutContextIdentifier',
        'cmdvalues' => 'setCmdvalues',
        'deleted_by' => 'setDeletedBy',
        'deleted_on' => 'setDeletedOn',
        'external_identifier' => 'setExternalIdentifier',
        'has_sub_jobs' => 'setHasSubJobs',
        'id' => 'setId',
        'job_path' => 'setJobPath',
        'last_log_entry' => 'setLastLogEntry',
        'last_modified' => 'setLastModified',
        'name' => 'setName',
        'placed_jobs' => 'setPlacedJobs',
        'profile' => 'setProfile',
        'relink_children' => 'setRelinkChildren',
        'remove_on' => 'setRemoveOn',
        'revision_creator_version' => 'setRevisionCreatorVersion',
        'revision_number' => 'setRevisionNumber',
        'status' => 'setStatus',
        'target_medias' => 'setTargetMedias',
        'text_file_character_count' => 'setTextFileCharacterCount',
        'text_file_word_count' => 'setTextFileWordCount',
        'working_file' => 'setWorkingFile'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'assigned_to_groups' => 'getAssignedToGroups',
        'assigned_to_users' => 'getAssignedToUsers',
        'assignee_last_modified' => 'getAssigneeLastModified',
        'can_edit_permissions' => 'getCanEditPermissions',
        'check_out_by' => 'getCheckOutBy',
        'checkout_context_identifier' => 'getCheckoutContextIdentifier',
        'cmdvalues' => 'getCmdvalues',
        'deleted_by' => 'getDeletedBy',
        'deleted_on' => 'getDeletedOn',
        'external_identifier' => 'getExternalIdentifier',
        'has_sub_jobs' => 'getHasSubJobs',
        'id' => 'getId',
        'job_path' => 'getJobPath',
        'last_log_entry' => 'getLastLogEntry',
        'last_modified' => 'getLastModified',
        'name' => 'getName',
        'placed_jobs' => 'getPlacedJobs',
        'profile' => 'getProfile',
        'relink_children' => 'getRelinkChildren',
        'remove_on' => 'getRemoveOn',
        'revision_creator_version' => 'getRevisionCreatorVersion',
        'revision_number' => 'getRevisionNumber',
        'status' => 'getStatus',
        'target_medias' => 'getTargetMedias',
        'text_file_character_count' => 'getTextFileCharacterCount',
        'text_file_word_count' => 'getTextFileWordCount',
        'working_file' => 'getWorkingFile'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assigned_to_groups'] = isset($data['assigned_to_groups']) ? $data['assigned_to_groups'] : null;
        $this->container['assigned_to_users'] = isset($data['assigned_to_users']) ? $data['assigned_to_users'] : null;
        $this->container['assignee_last_modified'] = isset($data['assignee_last_modified']) ? $data['assignee_last_modified'] : null;
        $this->container['can_edit_permissions'] = isset($data['can_edit_permissions']) ? $data['can_edit_permissions'] : null;
        $this->container['check_out_by'] = isset($data['check_out_by']) ? $data['check_out_by'] : null;
        $this->container['checkout_context_identifier'] = isset($data['checkout_context_identifier']) ? $data['checkout_context_identifier'] : null;
        $this->container['cmdvalues'] = isset($data['cmdvalues']) ? $data['cmdvalues'] : null;
        $this->container['deleted_by'] = isset($data['deleted_by']) ? $data['deleted_by'] : null;
        $this->container['deleted_on'] = isset($data['deleted_on']) ? $data['deleted_on'] : null;
        $this->container['external_identifier'] = isset($data['external_identifier']) ? $data['external_identifier'] : null;
        $this->container['has_sub_jobs'] = isset($data['has_sub_jobs']) ? $data['has_sub_jobs'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['job_path'] = isset($data['job_path']) ? $data['job_path'] : null;
        $this->container['last_log_entry'] = isset($data['last_log_entry']) ? $data['last_log_entry'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['placed_jobs'] = isset($data['placed_jobs']) ? $data['placed_jobs'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['relink_children'] = isset($data['relink_children']) ? $data['relink_children'] : null;
        $this->container['remove_on'] = isset($data['remove_on']) ? $data['remove_on'] : null;
        $this->container['revision_creator_version'] = isset($data['revision_creator_version']) ? $data['revision_creator_version'] : null;
        $this->container['revision_number'] = isset($data['revision_number']) ? $data['revision_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['target_medias'] = isset($data['target_medias']) ? $data['target_medias'] : null;
        $this->container['text_file_character_count'] = isset($data['text_file_character_count']) ? $data['text_file_character_count'] : null;
        $this->container['text_file_word_count'] = isset($data['text_file_word_count']) ? $data['text_file_word_count'] : null;
        $this->container['working_file'] = isset($data['working_file']) ? $data['working_file'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets assigned_to_groups
     * @return \Swagger\Client\Model\ReferenceV1TO[]
     */
    public function getAssignedToGroups()
    {
        return $this->container['assigned_to_groups'];
    }

    /**
     * Sets assigned_to_groups
     * @param \Swagger\Client\Model\ReferenceV1TO[] $assigned_to_groups a collection of references to the groups this Job is assigned to
     * @return $this
     */
    public function setAssignedToGroups($assigned_to_groups)
    {
        $this->container['assigned_to_groups'] = $assigned_to_groups;

        return $this;
    }

    /**
     * Gets assigned_to_users
     * @return \Swagger\Client\Model\ReferenceV1TO[]
     */
    public function getAssignedToUsers()
    {
        return $this->container['assigned_to_users'];
    }

    /**
     * Sets assigned_to_users
     * @param \Swagger\Client\Model\ReferenceV1TO[] $assigned_to_users a collection of references to the users this Job is assigned to
     * @return $this
     */
    public function setAssignedToUsers($assigned_to_users)
    {
        $this->container['assigned_to_users'] = $assigned_to_users;

        return $this;
    }

    /**
     * Gets assignee_last_modified
     * @return int
     */
    public function getAssigneeLastModified()
    {
        return $this->container['assignee_last_modified'];
    }

    /**
     * Sets assignee_last_modified
     * @param int $assignee_last_modified the date in UTC milliseconds when this Job last had its assignment changed
     * @return $this
     */
    public function setAssigneeLastModified($assignee_last_modified)
    {
        $this->container['assignee_last_modified'] = $assignee_last_modified;

        return $this;
    }

    /**
     * Gets can_edit_permissions
     * @return bool
     */
    public function getCanEditPermissions()
    {
        return $this->container['can_edit_permissions'];
    }

    /**
     * Sets can_edit_permissions
     * @param bool $can_edit_permissions whether the current user is allowed to edit the permissions of this Job
     * @return $this
     */
    public function setCanEditPermissions($can_edit_permissions)
    {
        $this->container['can_edit_permissions'] = $can_edit_permissions;

        return $this;
    }

    /**
     * Gets check_out_by
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getCheckOutBy()
    {
        return $this->container['check_out_by'];
    }

    /**
     * Sets check_out_by
     * @param \Swagger\Client\Model\ReferenceV1TO $check_out_by a reference to the User that currently has the Job checked out, if any
     * @return $this
     */
    public function setCheckOutBy($check_out_by)
    {
        $this->container['check_out_by'] = $check_out_by;

        return $this;
    }

    /**
     * Gets checkout_context_identifier
     * @return string
     */
    public function getCheckoutContextIdentifier()
    {
        return $this->container['checkout_context_identifier'];
    }

    /**
     * Sets checkout_context_identifier
     * @param string $checkout_context_identifier
     * @return $this
     */
    public function setCheckoutContextIdentifier($checkout_context_identifier)
    {
        $this->container['checkout_context_identifier'] = $checkout_context_identifier;

        return $this;
    }

    /**
     * Gets cmdvalues
     * @return \Swagger\Client\Model\CMDValueV1TO[]
     */
    public function getCmdvalues()
    {
        return $this->container['cmdvalues'];
    }

    /**
     * Sets cmdvalues
     * @param \Swagger\Client\Model\CMDValueV1TO[] $cmdvalues a collection of Custom Metadata Values
     * @return $this
     */
    public function setCmdvalues($cmdvalues)
    {
        $this->container['cmdvalues'] = $cmdvalues;

        return $this;
    }

    /**
     * Gets deleted_by
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     * @param \Swagger\Client\Model\ReferenceV1TO $deleted_by a reference to the User that marked this Job for deletion, if any
     * @return $this
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets deleted_on
     * @return int
     */
    public function getDeletedOn()
    {
        return $this->container['deleted_on'];
    }

    /**
     * Sets deleted_on
     * @param int $deleted_on if this Job is marked deleted, the date when that occurred in UTC milliseconds since the epoch
     * @return $this
     */
    public function setDeletedOn($deleted_on)
    {
        $this->container['deleted_on'] = $deleted_on;

        return $this;
    }

    /**
     * Gets external_identifier
     * @return string
     */
    public function getExternalIdentifier()
    {
        return $this->container['external_identifier'];
    }

    /**
     * Sets external_identifier
     * @param string $external_identifier an arbitrary string used to identify this Job to another system
     * @return $this
     */
    public function setExternalIdentifier($external_identifier)
    {
        $this->container['external_identifier'] = $external_identifier;

        return $this;
    }

    /**
     * Gets has_sub_jobs
     * @return bool
     */
    public function getHasSubJobs()
    {
        return $this->container['has_sub_jobs'];
    }

    /**
     * Sets has_sub_jobs
     * @param bool $has_sub_jobs whether this Job has any child Jobs
     * @return $this
     */
    public function setHasSubJobs($has_sub_jobs)
    {
        $this->container['has_sub_jobs'] = $has_sub_jobs;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id the ID of the object which may be passed to various APIs to fetch or update the object
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets job_path
     * @return \Swagger\Client\Model\ReferenceV1TO[]
     */
    public function getJobPath()
    {
        return $this->container['job_path'];
    }

    /**
     * Sets job_path
     * @param \Swagger\Client\Model\ReferenceV1TO[] $job_path a list of references to this Job's ancestors from the root of the hierarchy to the immediate parent
     * @return $this
     */
    public function setJobPath($job_path)
    {
        $this->container['job_path'] = $job_path;

        return $this;
    }

    /**
     * Gets last_log_entry
     * @return \Swagger\Client\Model\JobLogEntryV1TO
     */
    public function getLastLogEntry()
    {
        return $this->container['last_log_entry'];
    }

    /**
     * Sets last_log_entry
     * @param \Swagger\Client\Model\JobLogEntryV1TO $last_log_entry the last log entry for this Job
     * @return $this
     */
    public function setLastLogEntry($last_log_entry)
    {
        $this->container['last_log_entry'] = $last_log_entry;

        return $this;
    }

    /**
     * Gets last_modified
     * @return int
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     * @param int $last_modified the last modification date of this job, in UTC milliseconds since the epoch
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name the name of the object, if it has one
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets placed_jobs
     * @return \Swagger\Client\Model\PlacedJobV1TO[]
     */
    public function getPlacedJobs()
    {
        return $this->container['placed_jobs'];
    }

    /**
     * Sets placed_jobs
     * @param \Swagger\Client\Model\PlacedJobV1TO[] $placed_jobs a collection of PlacedJob objects that specify which other Jobs are linked into this one
     * @return $this
     */
    public function setPlacedJobs($placed_jobs)
    {
        $this->container['placed_jobs'] = $placed_jobs;

        return $this;
    }

    /**
     * Gets profile
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     * @param \Swagger\Client\Model\ReferenceV1TO $profile a reference to this Job's Profile, if any
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets relink_children
     * @return bool
     */
    public function getRelinkChildren()
    {
        return $this->container['relink_children'];
    }

    /**
     * Sets relink_children
     * @param bool $relink_children a boolean flag that says whether this Job's PlacedJobs need to be adjusted to match this Job's new location in the hierarchy
     * @return $this
     */
    public function setRelinkChildren($relink_children)
    {
        $this->container['relink_children'] = $relink_children;

        return $this;
    }

    /**
     * Gets remove_on
     * @return int
     */
    public function getRemoveOn()
    {
        return $this->container['remove_on'];
    }

    /**
     * Sets remove_on
     * @param int $remove_on if this Job is marked deleted, the date when it will be permanently removed in UTC milliseconds since the epoch
     * @return $this
     */
    public function setRemoveOn($remove_on)
    {
        $this->container['remove_on'] = $remove_on;

        return $this;
    }

    /**
     * Gets revision_creator_version
     * @return string
     */
    public function getRevisionCreatorVersion()
    {
        return $this->container['revision_creator_version'];
    }

    /**
     * Sets revision_creator_version
     * @param string $revision_creator_version optional identifier of the creator of the current working file
     * @return $this
     */
    public function setRevisionCreatorVersion($revision_creator_version)
    {
        $this->container['revision_creator_version'] = $revision_creator_version;

        return $this;
    }

    /**
     * Gets revision_number
     * @return int
     */
    public function getRevisionNumber()
    {
        return $this->container['revision_number'];
    }

    /**
     * Sets revision_number
     * @param int $revision_number the number of the current Revision of this Job
     * @return $this
     */
    public function setRevisionNumber($revision_number)
    {
        $this->container['revision_number'] = $revision_number;

        return $this;
    }

    /**
     * Gets status
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Swagger\Client\Model\ReferenceV1TO $status a reference to the current AppliedStatus of this Job, if any.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets target_medias
     * @return \Swagger\Client\Model\ReferenceV1TO[]
     */
    public function getTargetMedias()
    {
        return $this->container['target_medias'];
    }

    /**
     * Sets target_medias
     * @param \Swagger\Client\Model\ReferenceV1TO[] $target_medias a collection of references to TargetMedia objects that this Job is intended to support
     * @return $this
     */
    public function setTargetMedias($target_medias)
    {
        $this->container['target_medias'] = $target_medias;

        return $this;
    }

    /**
     * Gets text_file_character_count
     * @return string
     */
    public function getTextFileCharacterCount()
    {
        return $this->container['text_file_character_count'];
    }

    /**
     * Sets text_file_character_count
     * @param string $text_file_character_count character count of the current working file, if it is a textual document
     * @return $this
     */
    public function setTextFileCharacterCount($text_file_character_count)
    {
        $this->container['text_file_character_count'] = $text_file_character_count;

        return $this;
    }

    /**
     * Gets text_file_word_count
     * @return string
     */
    public function getTextFileWordCount()
    {
        return $this->container['text_file_word_count'];
    }

    /**
     * Sets text_file_word_count
     * @param string $text_file_word_count word count of the current working file, if it is a textual document
     * @return $this
     */
    public function setTextFileWordCount($text_file_word_count)
    {
        $this->container['text_file_word_count'] = $text_file_word_count;

        return $this;
    }

    /**
     * Gets working_file
     * @return \Swagger\Client\Model\FileV1TO
     */
    public function getWorkingFile()
    {
        return $this->container['working_file'];
    }

    /**
     * Sets working_file
     * @param \Swagger\Client\Model\FileV1TO $working_file the working file of the current Revision
     * @return $this
     */
    public function setWorkingFile($working_file)
    {
        $this->container['working_file'] = $working_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return wp_json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return wp_json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


