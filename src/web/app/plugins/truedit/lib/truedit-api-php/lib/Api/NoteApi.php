<?php
/**
 * NoteApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * NoteApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NoteApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return NoteApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createUsingPOST1
     *
     * Create one or more notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\NoteV1ListTO $notes notes (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseNoteV1TO_
     */
    public function createUsingPOST1($job_id, $notes, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createUsingPOST1WithHttpInfo($job_id, $notes, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createUsingPOST1WithHttpInfo
     *
     * Create one or more notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\NoteV1ListTO $notes notes (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUsingPOST1WithHttpInfo($job_id, $notes, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling createUsingPOST1');
        }
        // verify the required parameter 'notes' is set
        if ($notes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $notes when calling createUsingPOST1');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($notes)) {
            $_tempBody = $notes;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_',
                '/1/job/{jobID}/note'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETE3
     *
     * Delete a note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteUsingDELETE3($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteUsingDELETE3WithHttpInfo($job_id, $note_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteUsingDELETE3WithHttpInfo
     *
     * Delete a note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETE3WithHttpInfo($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling deleteUsingDELETE3');
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note_id when calling deleteUsingDELETE3');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note/{noteID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                "{" . "noteID" . "}",
                $this->apiClient->getSerializer()->toPathValue($note_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/note/{noteID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsingGET5
     *
     * Fetch all notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseNoteV1TO_
     */
    public function fetchAllUsingGET5($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAllUsingGET5WithHttpInfo($job_id, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAllUsingGET5WithHttpInfo
     *
     * Fetch all notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllUsingGET5WithHttpInfo($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchAllUsingGET5');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_',
                '/1/job/{jobID}/note'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchUsingGET4
     *
     * Fetch a single Note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_
     */
    public function fetchUsingGET4($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchUsingGET4WithHttpInfo($job_id, $note_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchUsingGET4WithHttpInfo
     *
     * Fetch a single Note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchUsingGET4WithHttpInfo($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchUsingGET4');
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note_id when calling fetchUsingGET4');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note/{noteID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                "{" . "noteID" . "}",
                $this->apiClient->getSerializer()->toPathValue($note_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_',
                '/1/job/{jobID}/note/{noteID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUsingPUT2
     *
     * Update a note for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param \Swagger\Client\Model\NoteV1TO $note note (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_
     */
    public function updateUsingPUT2($job_id, $note_id, $note, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateUsingPUT2WithHttpInfo($job_id, $note_id, $note, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateUsingPUT2WithHttpInfo
     *
     * Update a note for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param \Swagger\Client\Model\NoteV1TO $note note (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUsingPUT2WithHttpInfo($job_id, $note_id, $note, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateUsingPUT2');
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note_id when calling updateUsingPUT2');
        }
        // verify the required parameter 'note' is set
        if ($note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note when calling updateUsingPUT2');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note/{noteID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                "{" . "noteID" . "}",
                $this->apiClient->getSerializer()->toPathValue($note_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($note)) {
            $_tempBody = $note;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_',
                '/1/job/{jobID}/note/{noteID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
