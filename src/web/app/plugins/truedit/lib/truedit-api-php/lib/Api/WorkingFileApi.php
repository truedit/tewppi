<?php
/**
 * WorkingFileApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * WorkingFileApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkingFileApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return WorkingFileApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation retrieveJobWorkingFileUsingGET1
     *
     * Fetch the working file for a specific job
     *
     * @param int $job_id jobID (required)
     * @param bool $dl dl (optional, default to false)
     * @param string $version version (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function retrieveJobWorkingFileUsingGET1($job_id, $dl = 'false', $version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->retrieveJobWorkingFileUsingGET1WithHttpInfo($job_id, $dl, $version, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation retrieveJobWorkingFileUsingGET1WithHttpInfo
     *
     * Fetch the working file for a specific job
     *
     * @param int $job_id jobID (required)
     * @param bool $dl dl (optional, default to false)
     * @param string $version version (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveJobWorkingFileUsingGET1WithHttpInfo($job_id, $dl = 'false', $version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling retrieveJobWorkingFileUsingGET1');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/workingFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($dl !== null) {
            $queryParams['dl'] = $this->apiClient->getSerializer()->toQueryValue($dl);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = $this->apiClient->getSerializer()->toQueryValue($version);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/1/job/{jobID}/workingFile'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation setWorkingFileUsingPOST
     *
     * Set the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseFileV1TO_
     */
    public function setWorkingFileUsingPOST($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->setWorkingFileUsingPOSTWithHttpInfo($job_id, $file, $modified, $file_name, $compression, $creator_version, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation setWorkingFileUsingPOSTWithHttpInfo
     *
     * Set the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseFileV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function setWorkingFileUsingPOSTWithHttpInfo($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling setWorkingFileUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/workingFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($modified !== null) {
            $queryParams['modified'] = $this->apiClient->getSerializer()->toQueryValue($modified);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = $this->apiClient->getSerializer()->toQueryValue($file_name);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($creator_version !== null) {
            $queryParams['creatorVersion'] = $this->apiClient->getSerializer()->toQueryValue($creator_version);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_',
                '/1/job/{jobID}/workingFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkingFileUsingPUT
     *
     * Update the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseFileV1TO_
     */
    public function updateWorkingFileUsingPUT($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateWorkingFileUsingPUTWithHttpInfo($job_id, $file, $modified, $file_name, $compression, $creator_version, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateWorkingFileUsingPUTWithHttpInfo
     *
     * Update the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseFileV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkingFileUsingPUTWithHttpInfo($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateWorkingFileUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/workingFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($modified !== null) {
            $queryParams['modified'] = $this->apiClient->getSerializer()->toQueryValue($modified);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = $this->apiClient->getSerializer()->toQueryValue($file_name);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($creator_version !== null) {
            $queryParams['creatorVersion'] = $this->apiClient->getSerializer()->toQueryValue($creator_version);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_',
                '/1/job/{jobID}/workingFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
