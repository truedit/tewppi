<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return JobApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addLinksToJobUsingPOST
     *
     * Create PlacedJob records for the specified Job's current Revision.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\PlacedJobV1ListTO $request_message requestMessage (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function addLinksToJobUsingPOST($job_id, $request_message, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->addLinksToJobUsingPOSTWithHttpInfo($job_id, $request_message, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation addLinksToJobUsingPOSTWithHttpInfo
     *
     * Create PlacedJob records for the specified Job's current Revision.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\PlacedJobV1ListTO $request_message requestMessage (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLinksToJobUsingPOSTWithHttpInfo($job_id, $request_message, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling addLinksToJobUsingPOST');
        }
        // verify the required parameter 'request_message' is set
        if ($request_message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_message when calling addLinksToJobUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedJob";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($request_message)) {
            $_tempBody = $request_message;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/placedJob'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addLogEntriesUsingPOST
     *
     * Create one or more Log entries for a specified Job
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\JobLogEntryV1ListTO $request_message requestMessage (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function addLogEntriesUsingPOST($job_id, $request_message, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->addLogEntriesUsingPOSTWithHttpInfo($job_id, $request_message, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation addLogEntriesUsingPOSTWithHttpInfo
     *
     * Create one or more Log entries for a specified Job
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\JobLogEntryV1ListTO $request_message requestMessage (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLogEntriesUsingPOSTWithHttpInfo($job_id, $request_message, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling addLogEntriesUsingPOST');
        }
        // verify the required parameter 'request_message' is set
        if ($request_message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_message when calling addLogEntriesUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/log";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($request_message)) {
            $_tempBody = $request_message;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/log'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelCheckoutUsingDELETE
     *
     * Cancel the checkout of the specified Job.
     *
     * @param int $job_id jobID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseJobV1TO_
     */
    public function cancelCheckoutUsingDELETE($job_id)
    {
        list($response) = $this->cancelCheckoutUsingDELETEWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation cancelCheckoutUsingDELETEWithHttpInfo
     *
     * Cancel the checkout of the specified Job.
     *
     * @param int $job_id jobID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelCheckoutUsingDELETEWithHttpInfo($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling cancelCheckoutUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/checkout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_',
                '/1/job/{jobID}/checkout'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkInJobUsingPUT
     *
     * Check in the specified Job.
     *
     * @param int $job_id jobID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function checkInJobUsingPUT($job_id)
    {
        list($response) = $this->checkInJobUsingPUTWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation checkInJobUsingPUTWithHttpInfo
     *
     * Check in the specified Job.
     *
     * @param int $job_id jobID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkInJobUsingPUTWithHttpInfo($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling checkInJobUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/checkout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/checkout'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkOutJobUsingPOST
     *
     * Check out the specified Job.
     *
     * @param int $job_id ID of the Job to be checked out (required)
     * @param string $context Optional context of the checkout (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseJobV1TO_
     */
    public function checkOutJobUsingPOST($job_id, $context = null)
    {
        list($response) = $this->checkOutJobUsingPOSTWithHttpInfo($job_id, $context);
        return $response;
    }

    /**
     * Operation checkOutJobUsingPOSTWithHttpInfo
     *
     * Check out the specified Job.
     *
     * @param int $job_id ID of the Job to be checked out (required)
     * @param string $context Optional context of the checkout (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkOutJobUsingPOSTWithHttpInfo($job_id, $context = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling checkOutJobUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/checkout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($context !== null) {
            $queryParams['context'] = $this->apiClient->getSerializer()->toQueryValue($context);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_',
                '/1/job/{jobID}/checkout'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createUsingPOST
     *
     * Create one or more jobs.
     *
     * @param \Swagger\Client\Model\JobV1ListTO $jobs jobs (required)
     * @param int $parent_job_id parentJobID (optional)
     * @param bool $notify_assignee notifyAssignee (optional, default to false)
     * @param bool $increment_name incrementName (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseJobV1TO_
     */
    public function createUsingPOST($jobs, $parent_job_id = null, $notify_assignee = 'false', $increment_name = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createUsingPOSTWithHttpInfo($jobs, $parent_job_id, $notify_assignee, $increment_name, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createUsingPOSTWithHttpInfo
     *
     * Create one or more jobs.
     *
     * @param \Swagger\Client\Model\JobV1ListTO $jobs jobs (required)
     * @param int $parent_job_id parentJobID (optional)
     * @param bool $notify_assignee notifyAssignee (optional, default to false)
     * @param bool $increment_name incrementName (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUsingPOSTWithHttpInfo($jobs, $parent_job_id = null, $notify_assignee = 'false', $increment_name = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'jobs' is set
        if ($jobs === null) {
            throw new \InvalidArgumentException('Missing the required parameter $jobs when calling createUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/job";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($parent_job_id !== null) {
            $queryParams['parentJobID'] = $this->apiClient->getSerializer()->toQueryValue($parent_job_id);
        }
        // query params
        if ($notify_assignee !== null) {
            $queryParams['notifyAssignee'] = $this->apiClient->getSerializer()->toQueryValue($notify_assignee);
        }
        // query params
        if ($increment_name !== null) {
            $queryParams['incrementName'] = $this->apiClient->getSerializer()->toQueryValue($increment_name);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // body params
        $_tempBody = null;
        if (isset($jobs)) {
            $_tempBody = $jobs;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseJobV1TO_',
                '/1/job'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createUsingPOST1
     *
     * Create one or more notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\NoteV1ListTO $notes notes (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseNoteV1TO_
     */
    public function createUsingPOST1($job_id, $notes, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createUsingPOST1WithHttpInfo($job_id, $notes, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createUsingPOST1WithHttpInfo
     *
     * Create one or more notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\NoteV1ListTO $notes notes (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUsingPOST1WithHttpInfo($job_id, $notes, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling createUsingPOST1');
        }
        // verify the required parameter 'notes' is set
        if ($notes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $notes when calling createUsingPOST1');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($notes)) {
            $_tempBody = $notes;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_',
                '/1/job/{jobID}/note'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createUsingPOST2
     *
     * Create one or more remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\RemarkV1ListTO $remarks remarks (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_
     */
    public function createUsingPOST2($job_id, $remarks, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createUsingPOST2WithHttpInfo($job_id, $remarks, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createUsingPOST2WithHttpInfo
     *
     * Create one or more remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\RemarkV1ListTO $remarks remarks (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUsingPOST2WithHttpInfo($job_id, $remarks, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling createUsingPOST2');
        }
        // verify the required parameter 'remarks' is set
        if ($remarks === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remarks when calling createUsingPOST2');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remarks)) {
            $_tempBody = $remarks;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_',
                '/1/job/{jobID}/remark'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAllLinksFromJobUsingDELETE
     *
     * Delete all PlacedJob records from the specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteAllLinksFromJobUsingDELETE($job_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteAllLinksFromJobUsingDELETEWithHttpInfo($job_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteAllLinksFromJobUsingDELETEWithHttpInfo
     *
     * Delete all PlacedJob records from the specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllLinksFromJobUsingDELETEWithHttpInfo($job_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling deleteAllLinksFromJobUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedJob";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/placedJob'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOneLinkFromJobUsingDELETE
     *
     * Delete one PlacedJob record from the specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param int $link_id linkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteOneLinkFromJobUsingDELETE($job_id, $link_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteOneLinkFromJobUsingDELETEWithHttpInfo($job_id, $link_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteOneLinkFromJobUsingDELETEWithHttpInfo
     *
     * Delete one PlacedJob record from the specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param int $link_id linkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOneLinkFromJobUsingDELETEWithHttpInfo($job_id, $link_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling deleteOneLinkFromJobUsingDELETE');
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $link_id when calling deleteOneLinkFromJobUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedJob/{linkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                "{" . "linkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($link_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/placedJob/{linkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETE2
     *
     * Mark one Job for deletion.
     *
     * @param int $id id (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteUsingDELETE2($id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteUsingDELETE2WithHttpInfo($id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteUsingDELETE2WithHttpInfo
     *
     * Mark one Job for deletion.
     *
     * @param int $id id (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETE2WithHttpInfo($id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteUsingDELETE2');
        }
        // parse inputs
        $resourcePath = "/1/job/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETE3
     *
     * Delete a note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteUsingDELETE3($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteUsingDELETE3WithHttpInfo($job_id, $note_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteUsingDELETE3WithHttpInfo
     *
     * Delete a note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETE3WithHttpInfo($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling deleteUsingDELETE3');
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note_id when calling deleteUsingDELETE3');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note/{noteID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                "{" . "noteID" . "}",
                $this->apiClient->getSerializer()->toPathValue($note_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/note/{noteID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETE4
     *
     * Delete a remark from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteUsingDELETE4($job_id, $remark_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteUsingDELETE4WithHttpInfo($job_id, $remark_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteUsingDELETE4WithHttpInfo
     *
     * Delete a remark from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETE4WithHttpInfo($job_id, $remark_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling deleteUsingDELETE4');
        }
        // verify the required parameter 'remark_id' is set
        if ($remark_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remark_id when calling deleteUsingDELETE4');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark/{remarkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($remark_id !== null) {
            $resourcePath = str_replace(
                "{" . "remarkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($remark_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/remark/{remarkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsingGET4
     *
     * Fetch all Jobs, with pagination support.
     *
     * @param bool $minimal minimal (optional, default to false)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param bool $count_deleted countDeleted (optional, default to false)
     * @param bool $filter_links filterLinks (optional, default to true)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseJobV1TO_
     */
    public function fetchAllUsingGET4($minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $count_deleted = 'false', $filter_links = 'true', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAllUsingGET4WithHttpInfo($minimal, $page_number, $page_size, $order_by, $count_deleted, $filter_links, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAllUsingGET4WithHttpInfo
     *
     * Fetch all Jobs, with pagination support.
     *
     * @param bool $minimal minimal (optional, default to false)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param bool $count_deleted countDeleted (optional, default to false)
     * @param bool $filter_links filterLinks (optional, default to true)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllUsingGET4WithHttpInfo($minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $count_deleted = 'false', $filter_links = 'true', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // parse inputs
        $resourcePath = "/1/job";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minimal !== null) {
            $queryParams['minimal'] = $this->apiClient->getSerializer()->toQueryValue($minimal);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if ($count_deleted !== null) {
            $queryParams['countDeleted'] = $this->apiClient->getSerializer()->toQueryValue($count_deleted);
        }
        // query params
        if ($filter_links !== null) {
            $queryParams['filterLinks'] = $this->apiClient->getSerializer()->toQueryValue($filter_links);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseJobV1TO_',
                '/1/job'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsingGET5
     *
     * Fetch all notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseNoteV1TO_
     */
    public function fetchAllUsingGET5($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAllUsingGET5WithHttpInfo($job_id, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAllUsingGET5WithHttpInfo
     *
     * Fetch all notes for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllUsingGET5WithHttpInfo($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchAllUsingGET5');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_',
                '/1/job/{jobID}/note'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsingGET6
     *
     * Fetch all remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional)
     * @param int $modified_after modifiedAfter (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_
     */
    public function fetchAllUsingGET6($job_id, $page_number = null, $modified_after = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAllUsingGET6WithHttpInfo($job_id, $page_number, $modified_after, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAllUsingGET6WithHttpInfo
     *
     * Fetch all remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional)
     * @param int $modified_after modifiedAfter (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllUsingGET6WithHttpInfo($job_id, $page_number = null, $modified_after = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchAllUsingGET6');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($modified_after !== null) {
            $queryParams['modifiedAfter'] = $this->apiClient->getSerializer()->toQueryValue($modified_after);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_',
                '/1/job/{jobID}/remark'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsingGET7
     *
     * Fetch all available Revision objects for a Job.
     *
     * @param int $job_id jobID (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseRevisionV1TO_
     */
    public function fetchAllUsingGET7($job_id, $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAllUsingGET7WithHttpInfo($job_id, $minimal, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAllUsingGET7WithHttpInfo
     *
     * Fetch all available Revision objects for a Job.
     *
     * @param int $job_id jobID (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseRevisionV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllUsingGET7WithHttpInfo($job_id, $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchAllUsingGET7');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/revision";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minimal !== null) {
            $queryParams['minimal'] = $this->apiClient->getSerializer()->toQueryValue($minimal);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseRevisionV1TO_',
                '/1/job/{jobID}/revision'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseRevisionV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseRevisionV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchJobLogsUsingGET
     *
     * Fetch logs from a Job, with optional paging.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string $quick_search quickSearch (optional)
     * @param string[] $order_by orderBy (optional, default to created asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseJobLogEntryV1TO_
     */
    public function fetchJobLogsUsingGET($job_id, $page_number = '1', $page_size = '100', $quick_search = null, $order_by = 'created asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchJobLogsUsingGETWithHttpInfo($job_id, $page_number, $page_size, $quick_search, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchJobLogsUsingGETWithHttpInfo
     *
     * Fetch logs from a Job, with optional paging.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string $quick_search quickSearch (optional)
     * @param string[] $order_by orderBy (optional, default to created asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseJobLogEntryV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchJobLogsUsingGETWithHttpInfo($job_id, $page_number = '1', $page_size = '100', $quick_search = null, $order_by = 'created asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchJobLogsUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/log";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($quick_search !== null) {
            $queryParams['quickSearch'] = $this->apiClient->getSerializer()->toQueryValue($quick_search);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseJobLogEntryV1TO_',
                '/1/job/{jobID}/log'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseJobLogEntryV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseJobLogEntryV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchJobOutputsUsingGET
     *
     * Fetch metadata about Outputs from a Job.
     *
     * @param int $job_id jobID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseOutputFileV1TO_
     */
    public function fetchJobOutputsUsingGET($job_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchJobOutputsUsingGETWithHttpInfo($job_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchJobOutputsUsingGETWithHttpInfo
     *
     * Fetch metadata about Outputs from a Job.
     *
     * @param int $job_id jobID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseOutputFileV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchJobOutputsUsingGETWithHttpInfo($job_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchJobOutputsUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/output";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseOutputFileV1TO_',
                '/1/job/{jobID}/output'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseOutputFileV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseOutputFileV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchLinksFromJobUsingGET
     *
     * Fetch the current PlacedJobs (links) from a Job, with optional paging.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_
     */
    public function fetchLinksFromJobUsingGET($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchLinksFromJobUsingGETWithHttpInfo($job_id, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchLinksFromJobUsingGETWithHttpInfo
     *
     * Fetch the current PlacedJobs (links) from a Job, with optional paging.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLinksFromJobUsingGETWithHttpInfo($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchLinksFromJobUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedJob";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_',
                '/1/job/{jobID}/placedJob'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchLinksToJobUsingGET
     *
     * Fetch the current PlacedJobs (links) that target a specified Job, with optional paging.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_
     */
    public function fetchLinksToJobUsingGET($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchLinksToJobUsingGETWithHttpInfo($job_id, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchLinksToJobUsingGETWithHttpInfo
     *
     * Fetch the current PlacedJobs (links) that target a specified Job, with optional paging.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLinksToJobUsingGETWithHttpInfo($job_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchLinksToJobUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedInJob";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_',
                '/1/job/{jobID}/placedInJob'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponsePlacedJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchOneLinkFromJobUsingGET
     *
     * Fetch the a single specified PlacedJob (link) from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $link_id linkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponsePlacedJobV1TO_
     */
    public function fetchOneLinkFromJobUsingGET($job_id, $link_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchOneLinkFromJobUsingGETWithHttpInfo($job_id, $link_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchOneLinkFromJobUsingGETWithHttpInfo
     *
     * Fetch the a single specified PlacedJob (link) from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $link_id linkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponsePlacedJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchOneLinkFromJobUsingGETWithHttpInfo($job_id, $link_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchOneLinkFromJobUsingGET');
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $link_id when calling fetchOneLinkFromJobUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedJob/{linkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                "{" . "linkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($link_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponsePlacedJobV1TO_',
                '/1/job/{jobID}/placedJob/{linkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponsePlacedJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponsePlacedJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchOneUsingGET
     *
     * Fetch a single specified Revision from a specified Job.
     *
     * @param int $job_id jobID (required)
     * @param int $rev_id revID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseRevisionV1TO_
     */
    public function fetchOneUsingGET($job_id, $rev_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchOneUsingGETWithHttpInfo($job_id, $rev_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchOneUsingGETWithHttpInfo
     *
     * Fetch a single specified Revision from a specified Job.
     *
     * @param int $job_id jobID (required)
     * @param int $rev_id revID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseRevisionV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchOneUsingGETWithHttpInfo($job_id, $rev_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchOneUsingGET');
        }
        // verify the required parameter 'rev_id' is set
        if ($rev_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rev_id when calling fetchOneUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/revision/{revID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($rev_id !== null) {
            $resourcePath = str_replace(
                "{" . "revID" . "}",
                $this->apiClient->getSerializer()->toPathValue($rev_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseRevisionV1TO_',
                '/1/job/{jobID}/revision/{revID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseRevisionV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseRevisionV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchUsingGET3
     *
     * Fetch a single Job.
     *
     * @param int $id id (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param bool $count_deleted countDeleted (optional, default to false)
     * @param bool $filter_links filterLinks (optional, default to true)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseJobV1TO_
     */
    public function fetchUsingGET3($id, $minimal = 'false', $count_deleted = 'false', $filter_links = 'true', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchUsingGET3WithHttpInfo($id, $minimal, $count_deleted, $filter_links, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchUsingGET3WithHttpInfo
     *
     * Fetch a single Job.
     *
     * @param int $id id (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param bool $count_deleted countDeleted (optional, default to false)
     * @param bool $filter_links filterLinks (optional, default to true)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchUsingGET3WithHttpInfo($id, $minimal = 'false', $count_deleted = 'false', $filter_links = 'true', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling fetchUsingGET3');
        }
        // parse inputs
        $resourcePath = "/1/job/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minimal !== null) {
            $queryParams['minimal'] = $this->apiClient->getSerializer()->toQueryValue($minimal);
        }
        // query params
        if ($count_deleted !== null) {
            $queryParams['countDeleted'] = $this->apiClient->getSerializer()->toQueryValue($count_deleted);
        }
        // query params
        if ($filter_links !== null) {
            $queryParams['filterLinks'] = $this->apiClient->getSerializer()->toQueryValue($filter_links);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_',
                '/1/job/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchUsingGET4
     *
     * Fetch a single Note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_
     */
    public function fetchUsingGET4($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchUsingGET4WithHttpInfo($job_id, $note_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchUsingGET4WithHttpInfo
     *
     * Fetch a single Note from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchUsingGET4WithHttpInfo($job_id, $note_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchUsingGET4');
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note_id when calling fetchUsingGET4');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note/{noteID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                "{" . "noteID" . "}",
                $this->apiClient->getSerializer()->toPathValue($note_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_',
                '/1/job/{jobID}/note/{noteID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPreviewsForRevisionUsingGET
     *
     * Fetch information about the Previews of a specified Revision of a specified Job.
     *
     * @param int $job_id jobID (required)
     * @param int $rev_id revID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponsePreviewV1TO_
     */
    public function getPreviewsForRevisionUsingGET($job_id, $rev_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->getPreviewsForRevisionUsingGETWithHttpInfo($job_id, $rev_id, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation getPreviewsForRevisionUsingGETWithHttpInfo
     *
     * Fetch information about the Previews of a specified Revision of a specified Job.
     *
     * @param int $job_id jobID (required)
     * @param int $rev_id revID (required)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponsePreviewV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPreviewsForRevisionUsingGETWithHttpInfo($job_id, $rev_id, $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling getPreviewsForRevisionUsingGET');
        }
        // verify the required parameter 'rev_id' is set
        if ($rev_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rev_id when calling getPreviewsForRevisionUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/revision/{revID}/preview";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($rev_id !== null) {
            $resourcePath = str_replace(
                "{" . "revID" . "}",
                $this->apiClient->getSerializer()->toPathValue($rev_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponsePreviewV1TO_',
                '/1/job/{jobID}/revision/{revID}/preview'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponsePreviewV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponsePreviewV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveJobOutputFileUsingGET1
     *
     * Fetch a specific output file for a specific job
     *
     * @param int $job_id jobID (required)
     * @param int $output_type_id outputTypeID (required)
     * @param bool $dl dl (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function retrieveJobOutputFileUsingGET1($job_id, $output_type_id, $dl = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->retrieveJobOutputFileUsingGET1WithHttpInfo($job_id, $output_type_id, $dl, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation retrieveJobOutputFileUsingGET1WithHttpInfo
     *
     * Fetch a specific output file for a specific job
     *
     * @param int $job_id jobID (required)
     * @param int $output_type_id outputTypeID (required)
     * @param bool $dl dl (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveJobOutputFileUsingGET1WithHttpInfo($job_id, $output_type_id, $dl = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling retrieveJobOutputFileUsingGET1');
        }
        // verify the required parameter 'output_type_id' is set
        if ($output_type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $output_type_id when calling retrieveJobOutputFileUsingGET1');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/output/{outputTypeID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($dl !== null) {
            $queryParams['dl'] = $this->apiClient->getSerializer()->toQueryValue($dl);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($output_type_id !== null) {
            $resourcePath = str_replace(
                "{" . "outputTypeID" . "}",
                $this->apiClient->getSerializer()->toPathValue($output_type_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/1/job/{jobID}/output/{outputTypeID}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveJobWorkingFileUsingGET1
     *
     * Fetch the working file for a specific job
     *
     * @param int $job_id jobID (required)
     * @param bool $dl dl (optional, default to false)
     * @param string $version version (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function retrieveJobWorkingFileUsingGET1($job_id, $dl = 'false', $version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->retrieveJobWorkingFileUsingGET1WithHttpInfo($job_id, $dl, $version, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation retrieveJobWorkingFileUsingGET1WithHttpInfo
     *
     * Fetch the working file for a specific job
     *
     * @param int $job_id jobID (required)
     * @param bool $dl dl (optional, default to false)
     * @param string $version version (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveJobWorkingFileUsingGET1WithHttpInfo($job_id, $dl = 'false', $version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling retrieveJobWorkingFileUsingGET1');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/workingFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($dl !== null) {
            $queryParams['dl'] = $this->apiClient->getSerializer()->toQueryValue($dl);
        }
        // query params
        if ($version !== null) {
            $queryParams['version'] = $this->apiClient->getSerializer()->toQueryValue($version);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/1/job/{jobID}/workingFile'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation setWorkingFileUsingPOST
     *
     * Set the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseFileV1TO_
     */
    public function setWorkingFileUsingPOST($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->setWorkingFileUsingPOSTWithHttpInfo($job_id, $file, $modified, $file_name, $compression, $creator_version, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation setWorkingFileUsingPOSTWithHttpInfo
     *
     * Set the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseFileV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function setWorkingFileUsingPOSTWithHttpInfo($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling setWorkingFileUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/workingFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($modified !== null) {
            $queryParams['modified'] = $this->apiClient->getSerializer()->toQueryValue($modified);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = $this->apiClient->getSerializer()->toQueryValue($file_name);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($creator_version !== null) {
            $queryParams['creatorVersion'] = $this->apiClient->getSerializer()->toQueryValue($creator_version);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
			/*
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
			
			*/
			 if (function_exists('vip_safe_wp_remote_get')) {
                $formParams['file'] = vip_safe_wp_remote_get($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_',
                '/1/job/{jobID}/workingFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateJobUsingPUT
     *
     * Update a Job.
     *
     * @param int $job_id ID of the Job to be updated (required)
     * @param \Swagger\Client\Model\JobV1TO $job_updates Sparse JobV1TO containing updates (optional)
     * @param bool $notify_assignee whether to notify the assignee if it changed (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseJobV1TO_
     */
    public function updateJobUsingPUT($job_id, $job_updates = null, $notify_assignee = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateJobUsingPUTWithHttpInfo($job_id, $job_updates, $notify_assignee, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateJobUsingPUTWithHttpInfo
     *
     * Update a Job.
     *
     * @param int $job_id ID of the Job to be updated (required)
     * @param \Swagger\Client\Model\JobV1TO $job_updates Sparse JobV1TO containing updates (optional)
     * @param bool $notify_assignee whether to notify the assignee if it changed (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseJobV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJobUsingPUTWithHttpInfo($job_id, $job_updates = null, $notify_assignee = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateJobUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($notify_assignee !== null) {
            $queryParams['notifyAssignee'] = $this->apiClient->getSerializer()->toQueryValue($notify_assignee);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($job_updates)) {
            $_tempBody = $job_updates;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_',
                '/1/job/{jobID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseJobV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLinkInJobUsingPUT
     *
     * Update a PlacedJob record in the specified Job's current Revision.
     *
     * @param int $job_id jobID (required)
     * @param int $link_id linkID (required)
     * @param \Swagger\Client\Model\PlacedJobV1TO $update_to updateTO (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function updateLinkInJobUsingPUT($job_id, $link_id, $update_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateLinkInJobUsingPUTWithHttpInfo($job_id, $link_id, $update_to, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateLinkInJobUsingPUTWithHttpInfo
     *
     * Update a PlacedJob record in the specified Job's current Revision.
     *
     * @param int $job_id jobID (required)
     * @param int $link_id linkID (required)
     * @param \Swagger\Client\Model\PlacedJobV1TO $update_to updateTO (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLinkInJobUsingPUTWithHttpInfo($job_id, $link_id, $update_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateLinkInJobUsingPUT');
        }
        // verify the required parameter 'link_id' is set
        if ($link_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $link_id when calling updateLinkInJobUsingPUT');
        }
        // verify the required parameter 'update_to' is set
        if ($update_to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_to when calling updateLinkInJobUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/placedJob/{linkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($link_id !== null) {
            $resourcePath = str_replace(
                "{" . "linkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($link_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($update_to)) {
            $_tempBody = $update_to;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/placedJob/{linkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUsingPUT2
     *
     * Update a note for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param \Swagger\Client\Model\NoteV1TO $note note (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_
     */
    public function updateUsingPUT2($job_id, $note_id, $note, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateUsingPUT2WithHttpInfo($job_id, $note_id, $note, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateUsingPUT2WithHttpInfo
     *
     * Update a note for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $note_id noteID (required)
     * @param \Swagger\Client\Model\NoteV1TO $note note (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseNoteV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUsingPUT2WithHttpInfo($job_id, $note_id, $note, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateUsingPUT2');
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note_id when calling updateUsingPUT2');
        }
        // verify the required parameter 'note' is set
        if ($note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note when calling updateUsingPUT2');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/note/{noteID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                "{" . "noteID" . "}",
                $this->apiClient->getSerializer()->toPathValue($note_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($note)) {
            $_tempBody = $note;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_',
                '/1/job/{jobID}/note/{noteID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseNoteV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUsingPUT3
     *
     * Update a remark for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param \Swagger\Client\Model\RemarkV1TO $remark remark (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_
     */
    public function updateUsingPUT3($job_id, $remark_id, $remark, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateUsingPUT3WithHttpInfo($job_id, $remark_id, $remark, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateUsingPUT3WithHttpInfo
     *
     * Update a remark for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param \Swagger\Client\Model\RemarkV1TO $remark remark (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUsingPUT3WithHttpInfo($job_id, $remark_id, $remark, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateUsingPUT3');
        }
        // verify the required parameter 'remark_id' is set
        if ($remark_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remark_id when calling updateUsingPUT3');
        }
        // verify the required parameter 'remark' is set
        if ($remark === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remark when calling updateUsingPUT3');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark/{remarkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($remark_id !== null) {
            $resourcePath = str_replace(
                "{" . "remarkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($remark_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remark)) {
            $_tempBody = $remark;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_',
                '/1/job/{jobID}/remark/{remarkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWorkingFileUsingPUT
     *
     * Update the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseFileV1TO_
     */
    public function updateWorkingFileUsingPUT($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateWorkingFileUsingPUTWithHttpInfo($job_id, $file, $modified, $file_name, $compression, $creator_version, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateWorkingFileUsingPUTWithHttpInfo
     *
     * Update the working file for a specified Job's current Revision
     *
     * @param int $job_id jobID (required)
     * @param \SplFileObject $file file (optional)
     * @param int $modified modified (optional)
     * @param string $file_name fileName (optional)
     * @param string $compression compression (optional)
     * @param string $creator_version creatorVersion (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseFileV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWorkingFileUsingPUTWithHttpInfo($job_id, $file = null, $modified = null, $file_name = null, $compression = null, $creator_version = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateWorkingFileUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/workingFile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($modified !== null) {
            $queryParams['modified'] = $this->apiClient->getSerializer()->toQueryValue($modified);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = $this->apiClient->getSerializer()->toQueryValue($file_name);
        }
        // query params
        if ($compression !== null) {
            $queryParams['compression'] = $this->apiClient->getSerializer()->toQueryValue($compression);
        }
        // query params
        if ($creator_version !== null) {
            $queryParams['creatorVersion'] = $this->apiClient->getSerializer()->toQueryValue($creator_version);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
			/*
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
			*/
			 if (function_exists('vip_safe_wp_remote_get')) {
                $formParams['file'] = vip_safe_wp_remote_get($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
			
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_',
                '/1/job/{jobID}/workingFile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseFileV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
