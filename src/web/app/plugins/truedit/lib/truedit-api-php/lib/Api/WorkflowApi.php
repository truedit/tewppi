<?php
/**
 * WorkflowApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * WorkflowApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkflowApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return WorkflowApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createNewWorkflowsUsingPOST
     *
     * Create one or more Workflows
     *
     * @param \Swagger\Client\Model\WorkflowV1ListTO $new_workflows newWorkflows (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_
     */
    public function createNewWorkflowsUsingPOST($new_workflows, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createNewWorkflowsUsingPOSTWithHttpInfo($new_workflows, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createNewWorkflowsUsingPOSTWithHttpInfo
     *
     * Create one or more Workflows
     *
     * @param \Swagger\Client\Model\WorkflowV1ListTO $new_workflows newWorkflows (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewWorkflowsUsingPOSTWithHttpInfo($new_workflows, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'new_workflows' is set
        if ($new_workflows === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_workflows when calling createNewWorkflowsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/workflow";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // body params
        $_tempBody = null;
        if (isset($new_workflows)) {
            $_tempBody = $new_workflows;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_',
                '/1/workflow'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createTransitionsUsingPOST
     *
     * Create Transitions of one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param \Swagger\Client\Model\TransitionV1ListTO $incoming_transitions incomingTransitions (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseTransitionV1TO_
     */
    public function createTransitionsUsingPOST($workflow_id, $status_id, $incoming_transitions, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createTransitionsUsingPOSTWithHttpInfo($workflow_id, $status_id, $incoming_transitions, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createTransitionsUsingPOSTWithHttpInfo
     *
     * Create Transitions of one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param \Swagger\Client\Model\TransitionV1ListTO $incoming_transitions incomingTransitions (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseTransitionV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTransitionsUsingPOSTWithHttpInfo($workflow_id, $status_id, $incoming_transitions, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling createTransitionsUsingPOST');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling createTransitionsUsingPOST');
        }
        // verify the required parameter 'incoming_transitions' is set
        if ($incoming_transitions === null) {
            throw new \InvalidArgumentException('Missing the required parameter $incoming_transitions when calling createTransitionsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}/transition";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($incoming_transitions)) {
            $_tempBody = $incoming_transitions;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseTransitionV1TO_',
                '/1/workflow/{workflowID}/status/{statusID}/transition'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseTransitionV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseTransitionV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWorkstepsUsingPOST
     *
     * Create one or more Applied Statuses in a specified Workflow
     *
     * @param int $workflow_id workflowID (required)
     * @param \Swagger\Client\Model\AppliedStatusV1ListTO $incoming_worksteps incomingWorksteps (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_
     */
    public function createWorkstepsUsingPOST($workflow_id, $incoming_worksteps, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createWorkstepsUsingPOSTWithHttpInfo($workflow_id, $incoming_worksteps, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createWorkstepsUsingPOSTWithHttpInfo
     *
     * Create one or more Applied Statuses in a specified Workflow
     *
     * @param int $workflow_id workflowID (required)
     * @param \Swagger\Client\Model\AppliedStatusV1ListTO $incoming_worksteps incomingWorksteps (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkstepsUsingPOSTWithHttpInfo($workflow_id, $incoming_worksteps, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling createWorkstepsUsingPOST');
        }
        // verify the required parameter 'incoming_worksteps' is set
        if ($incoming_worksteps === null) {
            throw new \InvalidArgumentException('Missing the required parameter $incoming_worksteps when calling createWorkstepsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($incoming_worksteps)) {
            $_tempBody = $incoming_worksteps;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_',
                '/1/workflow/{workflowID}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOneTransitionUsingDELETE
     *
     * Delete one Transition of one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param int $destination_id destinationID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteOneTransitionUsingDELETE($workflow_id, $status_id, $destination_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteOneTransitionUsingDELETEWithHttpInfo($workflow_id, $status_id, $destination_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteOneTransitionUsingDELETEWithHttpInfo
     *
     * Delete one Transition of one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param int $destination_id destinationID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOneTransitionUsingDELETEWithHttpInfo($workflow_id, $status_id, $destination_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling deleteOneTransitionUsingDELETE');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling deleteOneTransitionUsingDELETE');
        }
        // verify the required parameter 'destination_id' is set
        if ($destination_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_id when calling deleteOneTransitionUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}/transition/{destinationID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        // path params
        if ($destination_id !== null) {
            $resourcePath = str_replace(
                "{" . "destinationID" . "}",
                $this->apiClient->getSerializer()->toPathValue($destination_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/workflow/{workflowID}/status/{statusID}/transition/{destinationID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOneWorkstepUsingDELETE
     *
     * Delete one Applied Status in a specified Workflow
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteOneWorkstepUsingDELETE($workflow_id, $status_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteOneWorkstepUsingDELETEWithHttpInfo($workflow_id, $status_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteOneWorkstepUsingDELETEWithHttpInfo
     *
     * Delete one Applied Status in a specified Workflow
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOneWorkstepUsingDELETEWithHttpInfo($workflow_id, $status_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling deleteOneWorkstepUsingDELETE');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling deleteOneWorkstepUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/workflow/{workflowID}/status/{statusID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllWorkflowsUsingGET
     *
     * Fetch all available Workflow objects
     *
     * @param bool $minimal minimal (optional, default to false)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @param \DateTime $if_modified_since  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_
     */
    public function fetchAllWorkflowsUsingGET($minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null)
    {
        list($response) = $this->fetchAllWorkflowsUsingGETWithHttpInfo($minimal, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language, $if_modified_since);
        return $response;
    }

    /**
     * Operation fetchAllWorkflowsUsingGETWithHttpInfo
     *
     * Fetch all available Workflow objects
     *
     * @param bool $minimal minimal (optional, default to false)
     * @param int $page_number pageNumber (optional, default to 1)
     * @param int $page_size pageSize (optional, default to 100)
     * @param string[] $order_by orderBy (optional, default to name asc)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @param \DateTime $if_modified_since  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllWorkflowsUsingGETWithHttpInfo($minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null)
    {
        // parse inputs
        $resourcePath = "/1/workflow";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minimal !== null) {
            $queryParams['minimal'] = $this->apiClient->getSerializer()->toQueryValue($minimal);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'multi', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_',
                '/1/workflow'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseWorkflowV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAppliedStatusesOfWorkflowUsingGET
     *
     * Fetch the Applied Status objects that belong to a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_
     */
    public function fetchAppliedStatusesOfWorkflowUsingGET($workflow_id, $minimal = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAppliedStatusesOfWorkflowUsingGETWithHttpInfo($workflow_id, $minimal, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAppliedStatusesOfWorkflowUsingGETWithHttpInfo
     *
     * Fetch the Applied Status objects that belong to a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAppliedStatusesOfWorkflowUsingGETWithHttpInfo($workflow_id, $minimal = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling fetchAppliedStatusesOfWorkflowUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minimal !== null) {
            $queryParams['minimal'] = $this->apiClient->getSerializer()->toQueryValue($minimal);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_',
                '/1/workflow/{workflowID}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseAppliedStatusV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchOneAppliedStatusOfWorkflowUsingGET
     *
     * Fetch one Applied Status object that belongs to a specified Workflow, specified by Status ID.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_
     */
    public function fetchOneAppliedStatusOfWorkflowUsingGET($workflow_id, $status_id, $minimal = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchOneAppliedStatusOfWorkflowUsingGETWithHttpInfo($workflow_id, $status_id, $minimal, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchOneAppliedStatusOfWorkflowUsingGETWithHttpInfo
     *
     * Fetch one Applied Status object that belongs to a specified Workflow, specified by Status ID.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param bool $minimal minimal (optional, default to false)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchOneAppliedStatusOfWorkflowUsingGETWithHttpInfo($workflow_id, $status_id, $minimal = 'false', $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling fetchOneAppliedStatusOfWorkflowUsingGET');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling fetchOneAppliedStatusOfWorkflowUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($minimal !== null) {
            $queryParams['minimal'] = $this->apiClient->getSerializer()->toQueryValue($minimal);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_',
                '/1/workflow/{workflowID}/status/{statusID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchOneTransitionUsingGET
     *
     * Fetch one Transition of one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param int $destination_id destinationID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseTransitionV1TO_
     */
    public function fetchOneTransitionUsingGET($workflow_id, $status_id, $destination_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchOneTransitionUsingGETWithHttpInfo($workflow_id, $status_id, $destination_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchOneTransitionUsingGETWithHttpInfo
     *
     * Fetch one Transition of one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param int $destination_id destinationID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseTransitionV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchOneTransitionUsingGETWithHttpInfo($workflow_id, $status_id, $destination_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling fetchOneTransitionUsingGET');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling fetchOneTransitionUsingGET');
        }
        // verify the required parameter 'destination_id' is set
        if ($destination_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_id when calling fetchOneTransitionUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}/transition/{destinationID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        // path params
        if ($destination_id !== null) {
            $resourcePath = str_replace(
                "{" . "destinationID" . "}",
                $this->apiClient->getSerializer()->toPathValue($destination_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseTransitionV1TO_',
                '/1/workflow/{workflowID}/status/{statusID}/transition/{destinationID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseTransitionV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseTransitionV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchOneWorkflowUsingGET
     *
     * Fetch a single Workflow object
     *
     * @param int $id id (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_
     */
    public function fetchOneWorkflowUsingGET($id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchOneWorkflowUsingGETWithHttpInfo($id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchOneWorkflowUsingGETWithHttpInfo
     *
     * Fetch a single Workflow object
     *
     * @param int $id id (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchOneWorkflowUsingGETWithHttpInfo($id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling fetchOneWorkflowUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_',
                '/1/workflow/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchTransitionsOfOneAppliedStatusUsingGET
     *
     * Fetch the Transitions from one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseTransitionV1TO_
     */
    public function fetchTransitionsOfOneAppliedStatusUsingGET($workflow_id, $status_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchTransitionsOfOneAppliedStatusUsingGETWithHttpInfo($workflow_id, $status_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchTransitionsOfOneAppliedStatusUsingGETWithHttpInfo
     *
     * Fetch the Transitions from one specified Applied Status of a specified Workflow.
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseTransitionV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchTransitionsOfOneAppliedStatusUsingGETWithHttpInfo($workflow_id, $status_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling fetchTransitionsOfOneAppliedStatusUsingGET');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling fetchTransitionsOfOneAppliedStatusUsingGET');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}/transition";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseTransitionV1TO_',
                '/1/workflow/{workflowID}/status/{statusID}/transition'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseTransitionV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseTransitionV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOneWorkflowUsingPUT
     *
     * Update one Workflow
     *
     * @param int $id id (required)
     * @param \Swagger\Client\Model\WorkflowV1TO $updated_workflow updatedWorkflow (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_
     */
    public function updateOneWorkflowUsingPUT($id, $updated_workflow, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateOneWorkflowUsingPUTWithHttpInfo($id, $updated_workflow, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateOneWorkflowUsingPUTWithHttpInfo
     *
     * Update one Workflow
     *
     * @param int $id id (required)
     * @param \Swagger\Client\Model\WorkflowV1TO $updated_workflow updatedWorkflow (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOneWorkflowUsingPUTWithHttpInfo($id, $updated_workflow, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateOneWorkflowUsingPUT');
        }
        // verify the required parameter 'updated_workflow' is set
        if ($updated_workflow === null) {
            throw new \InvalidArgumentException('Missing the required parameter $updated_workflow when calling updateOneWorkflowUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($updated_workflow)) {
            $_tempBody = $updated_workflow;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_',
                '/1/workflow/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseWorkflowV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOneWorkstepUsingPUT
     *
     * Update one Applied Status in a specified Workflow
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param \Swagger\Client\Model\AppliedStatusV1TO $incoming_workstep incomingWorkstep (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_
     */
    public function updateOneWorkstepUsingPUT($workflow_id, $status_id, $incoming_workstep, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateOneWorkstepUsingPUTWithHttpInfo($workflow_id, $status_id, $incoming_workstep, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateOneWorkstepUsingPUTWithHttpInfo
     *
     * Update one Applied Status in a specified Workflow
     *
     * @param int $workflow_id workflowID (required)
     * @param int $status_id statusID (required)
     * @param \Swagger\Client\Model\AppliedStatusV1TO $incoming_workstep incomingWorkstep (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOneWorkstepUsingPUTWithHttpInfo($workflow_id, $status_id, $incoming_workstep, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'workflow_id' is set
        if ($workflow_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $workflow_id when calling updateOneWorkstepUsingPUT');
        }
        // verify the required parameter 'status_id' is set
        if ($status_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status_id when calling updateOneWorkstepUsingPUT');
        }
        // verify the required parameter 'incoming_workstep' is set
        if ($incoming_workstep === null) {
            throw new \InvalidArgumentException('Missing the required parameter $incoming_workstep when calling updateOneWorkstepUsingPUT');
        }
        // parse inputs
        $resourcePath = "/1/workflow/{workflowID}/status/{statusID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($workflow_id !== null) {
            $resourcePath = str_replace(
                "{" . "workflowID" . "}",
                $this->apiClient->getSerializer()->toPathValue($workflow_id),
                $resourcePath
            );
        }
        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                "{" . "statusID" . "}",
                $this->apiClient->getSerializer()->toPathValue($status_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($incoming_workstep)) {
            $_tempBody = $incoming_workstep;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_',
                '/1/workflow/{workflowID}/status/{statusID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseAppliedStatusV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
