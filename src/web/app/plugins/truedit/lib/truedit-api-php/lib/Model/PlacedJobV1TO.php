<?php
/**
 * PlacedJobV1TO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PlacedJobV1TO Class Doc Comment
 *
 * @category    Class
 * @description Contains the details of one PlacedJob object.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PlacedJobV1TO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PlacedJobV1TO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_data' => 'string',
        'id' => 'int',
        'link_kind' => 'int',
        'name' => 'string',
        'output_type' => '\Swagger\Client\Model\ReferenceV1TO',
        'target_file' => '\Swagger\Client\Model\ReferenceV1TO',
        'target_job' => '\Swagger\Client\Model\ReferenceV1TO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_data' => null,
        'id' => 'int64',
        'link_kind' => 'int32',
        'name' => null,
        'output_type' => null,
        'target_file' => null,
        'target_job' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'client_data' => 'clientData',
        'id' => 'id',
        'link_kind' => 'linkKind',
        'name' => 'name',
        'output_type' => 'outputType',
        'target_file' => 'targetFile',
        'target_job' => 'targetJob'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'client_data' => 'setClientData',
        'id' => 'setId',
        'link_kind' => 'setLinkKind',
        'name' => 'setName',
        'output_type' => 'setOutputType',
        'target_file' => 'setTargetFile',
        'target_job' => 'setTargetJob'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'client_data' => 'getClientData',
        'id' => 'getId',
        'link_kind' => 'getLinkKind',
        'name' => 'getName',
        'output_type' => 'getOutputType',
        'target_file' => 'getTargetFile',
        'target_job' => 'getTargetJob'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LINK_KIND_0 = 0;
    const LINK_KIND_1 = 1;
    const LINK_KIND_2 = 2;
    const LINK_KIND_3 = 3;
    const LINK_KIND_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLinkKindAllowableValues()
    {
        return [
            self::LINK_KIND_0,
            self::LINK_KIND_1,
            self::LINK_KIND_2,
            self::LINK_KIND_3,
            self::LINK_KIND_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_data'] = isset($data['client_data']) ? $data['client_data'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['link_kind'] = isset($data['link_kind']) ? $data['link_kind'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['output_type'] = isset($data['output_type']) ? $data['output_type'] : null;
        $this->container['target_file'] = isset($data['target_file']) ? $data['target_file'] : null;
        $this->container['target_job'] = isset($data['target_job']) ? $data['target_job'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['link_kind'] === null) {
            $invalid_properties[] = "'link_kind' can't be null";
        }
        $allowed_values = $this->getLinkKindAllowableValues();
        if (!in_array($this->container['link_kind'], $allowed_values,true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'link_kind', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['target_job'] === null) {
            $invalid_properties[] = "'target_job' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['link_kind'] === null) {
            return false;
        }
        $allowed_values = $this->getLinkKindAllowableValues();
        if (!in_array($this->container['link_kind'], $allowed_values,true)) {
            return false;
        }
        if ($this->container['target_job'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets client_data
     * @return string
     */
    public function getClientData()
    {
        return $this->container['client_data'];
    }

    /**
     * Sets client_data
     * @param string $client_data Additional information set and used only by the application that created the link.
     * @return $this
     */
    public function setClientData($client_data)
    {
        $this->container['client_data'] = $client_data;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id the ID of the object which may be passed to various APIs to fetch or update the object
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link_kind
     * @return int
     */
    public function getLinkKind()
    {
        return $this->container['link_kind'];
    }

    /**
     * Sets link_kind
     * @param int $link_kind
     * @return $this
     */
    public function setLinkKind($link_kind)
    {
        $allowed_values = $this->getLinkKindAllowableValues();
        if (!in_array($link_kind, $allowed_values,true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'link_kind', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['link_kind'] = $link_kind;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name the name of the object, if it has one
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets output_type
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getOutputType()
    {
        return $this->container['output_type'];
    }

    /**
     * Sets output_type
     * @param \Swagger\Client\Model\ReferenceV1TO $output_type A reference to the Output Type of the target Job to use, or null/not set if its working file is to be used.
     * @return $this
     */
    public function setOutputType($output_type)
    {
        $this->container['output_type'] = $output_type;

        return $this;
    }

    /**
     * Gets target_file
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getTargetFile()
    {
        return $this->container['target_file'];
    }

    /**
     * Sets target_file
     * @param \Swagger\Client\Model\ReferenceV1TO $target_file A reference to the file that would currently be placed; set only by the server.
     * @return $this
     */
    public function setTargetFile($target_file)
    {
        $this->container['target_file'] = $target_file;

        return $this;
    }

    /**
     * Gets target_job
     * @return \Swagger\Client\Model\ReferenceV1TO
     */
    public function getTargetJob()
    {
        return $this->container['target_job'];
    }

    /**
     * Sets target_job
     * @param \Swagger\Client\Model\ReferenceV1TO $target_job
     * @return $this
     */
    public function setTargetJob($target_job)
    {
        $this->container['target_job'] = $target_job;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return wp_json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return wp_json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


