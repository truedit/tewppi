<?php
/**
 * RemarkApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * getNEXT REST API
 *
 * Welcome to the getNEXT Platform REST API Reference! You can use this REST API to develop integrations between getNEXT and other applications or script interactions with getNEXT.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RemarkApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemarkApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RemarkApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createUsingPOST2
     *
     * Create one or more remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\RemarkV1ListTO $remarks remarks (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_
     */
    public function createUsingPOST2($job_id, $remarks, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->createUsingPOST2WithHttpInfo($job_id, $remarks, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation createUsingPOST2WithHttpInfo
     *
     * Create one or more remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param \Swagger\Client\Model\RemarkV1ListTO $remarks remarks (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUsingPOST2WithHttpInfo($job_id, $remarks, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling createUsingPOST2');
        }
        // verify the required parameter 'remarks' is set
        if ($remarks === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remarks when calling createUsingPOST2');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remarks)) {
            $_tempBody = $remarks;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_',
                '/1/job/{jobID}/remark'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETE4
     *
     * Delete a remark from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResponseMessage
     */
    public function deleteUsingDELETE4($job_id, $remark_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->deleteUsingDELETE4WithHttpInfo($job_id, $remark_id, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation deleteUsingDELETE4WithHttpInfo
     *
     * Delete a remark from a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETE4WithHttpInfo($job_id, $remark_id, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling deleteUsingDELETE4');
        }
        // verify the required parameter 'remark_id' is set
        if ($remark_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remark_id when calling deleteUsingDELETE4');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark/{remarkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($remark_id !== null) {
            $resourcePath = str_replace(
                "{" . "remarkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($remark_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResponseMessage',
                '/1/job/{jobID}/remark/{remarkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResponseMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsingGET6
     *
     * Fetch all remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional)
     * @param int $modified_after modifiedAfter (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_
     */
    public function fetchAllUsingGET6($job_id, $page_number = null, $modified_after = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->fetchAllUsingGET6WithHttpInfo($job_id, $page_number, $modified_after, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation fetchAllUsingGET6WithHttpInfo
     *
     * Fetch all remarks for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $page_number pageNumber (optional)
     * @param int $modified_after modifiedAfter (optional)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1ResultListResponseRemarkV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllUsingGET6WithHttpInfo($job_id, $page_number = null, $modified_after = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling fetchAllUsingGET6');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($modified_after !== null) {
            $queryParams['modifiedAfter'] = $this->apiClient->getSerializer()->toQueryValue($modified_after);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_',
                '/1/job/{jobID}/remark'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1ResultListResponseRemarkV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUsingPUT3
     *
     * Update a remark for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param \Swagger\Client\Model\RemarkV1TO $remark remark (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_
     */
    public function updateUsingPUT3($job_id, $remark_id, $remark, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        list($response) = $this->updateUsingPUT3WithHttpInfo($job_id, $remark_id, $remark, $x_api_key, $x_app_api_key, $accept_language);
        return $response;
    }

    /**
     * Operation updateUsingPUT3WithHttpInfo
     *
     * Update a remark for a Job.
     *
     * @param int $job_id jobID (required)
     * @param int $remark_id remarkID (required)
     * @param \Swagger\Client\Model\RemarkV1TO $remark remark (required)
     * @param string $x_api_key  (optional)
     * @param string $x_app_api_key  (optional)
     * @param string $accept_language  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUsingPUT3WithHttpInfo($job_id, $remark_id, $remark, $x_api_key = null, $x_app_api_key = null, $accept_language = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling updateUsingPUT3');
        }
        // verify the required parameter 'remark_id' is set
        if ($remark_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remark_id when calling updateUsingPUT3');
        }
        // verify the required parameter 'remark' is set
        if ($remark === null) {
            throw new \InvalidArgumentException('Missing the required parameter $remark when calling updateUsingPUT3');
        }
        // parse inputs
        $resourcePath = "/1/job/{jobID}/remark/{remarkID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // header params
        if ($x_app_api_key !== null) {
            $headerParams['x-app-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_app_api_key);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobID" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($remark_id !== null) {
            $resourcePath = str_replace(
                "{" . "remarkID" . "}",
                $this->apiClient->getSerializer()->toPathValue($remark_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($remark)) {
            $_tempBody = $remark;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_',
                '/1/job/{jobID}/remark/{remarkID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API1SingleResultResponseRemarkV1TO_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
