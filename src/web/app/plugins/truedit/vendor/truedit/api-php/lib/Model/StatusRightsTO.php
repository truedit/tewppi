<?php
/**
 * StatusRightsTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TruEdit REST API
 *
 * Welcome to the TruEdit Platform REST API Reference! You can use this REST API to develop integrations between TruEdit and other applications or script interactions with TruEdit.
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StatusRightsTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StatusRightsTO implements ModelInterface, ArrayAccess {

	const DISCRIMINATOR = null;

	/**
	  * The original name of the model.
	  *
	  * @var string
	  */
	protected static $swaggerModelName = 'StatusRightsTO';

	/**
	  * Array of property to type mappings. Used for (de)serialization
	  *
	  * @var string[]
	  */
	protected static $swaggerTypes = [
		'can_access_read_only'  => 'bool',
		'can_change_assignment' => 'bool',
		'can_change_profile'    => 'bool',
		'can_change_status'     => 'bool',
		'can_check_out'         => 'bool',
		'can_duplicate'         => 'bool',
		'can_edit_metadata'     => 'bool',
		'can_mark_for_deletion' => 'bool',
		'can_move'              => 'bool',
		'can_restore_version'   => 'bool',
		'can_view_preview'      => 'bool',
		'status_to_ref'         => '\Swagger\Client\Model\ReferenceTO',
	];

	/**
	  * Array of property to format mappings. Used for (de)serialization
	  *
	  * @var string[]
	  */
	protected static $swaggerFormats = [
		'can_access_read_only'  => null,
		'can_change_assignment' => null,
		'can_change_profile'    => null,
		'can_change_status'     => null,
		'can_check_out'         => null,
		'can_duplicate'         => null,
		'can_edit_metadata'     => null,
		'can_mark_for_deletion' => null,
		'can_move'              => null,
		'can_restore_version'   => null,
		'can_view_preview'      => null,
		'status_to_ref'         => null,
	];

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function swaggerTypes() {
		return self::$swaggerTypes;
	}

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function swaggerFormats() {
		return self::$swaggerFormats;
	}

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @var string[]
	 */
	protected static $attributeMap = [
		'can_access_read_only'  => 'canAccessReadOnly',
		'can_change_assignment' => 'canChangeAssignment',
		'can_change_profile'    => 'canChangeProfile',
		'can_change_status'     => 'canChangeStatus',
		'can_check_out'         => 'canCheckOut',
		'can_duplicate'         => 'canDuplicate',
		'can_edit_metadata'     => 'canEditMetadata',
		'can_mark_for_deletion' => 'canMarkForDeletion',
		'can_move'              => 'canMove',
		'can_restore_version'   => 'canRestoreVersion',
		'can_view_preview'      => 'canViewPreview',
		'status_to_ref'         => 'statusTORef',
	];

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @var string[]
	 */
	protected static $setters = [
		'can_access_read_only'  => 'setCanAccessReadOnly',
		'can_change_assignment' => 'setCanChangeAssignment',
		'can_change_profile'    => 'setCanChangeProfile',
		'can_change_status'     => 'setCanChangeStatus',
		'can_check_out'         => 'setCanCheckOut',
		'can_duplicate'         => 'setCanDuplicate',
		'can_edit_metadata'     => 'setCanEditMetadata',
		'can_mark_for_deletion' => 'setCanMarkForDeletion',
		'can_move'              => 'setCanMove',
		'can_restore_version'   => 'setCanRestoreVersion',
		'can_view_preview'      => 'setCanViewPreview',
		'status_to_ref'         => 'setStatusToRef',
	];

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @var string[]
	 */
	protected static $getters = [
		'can_access_read_only'  => 'getCanAccessReadOnly',
		'can_change_assignment' => 'getCanChangeAssignment',
		'can_change_profile'    => 'getCanChangeProfile',
		'can_change_status'     => 'getCanChangeStatus',
		'can_check_out'         => 'getCanCheckOut',
		'can_duplicate'         => 'getCanDuplicate',
		'can_edit_metadata'     => 'getCanEditMetadata',
		'can_mark_for_deletion' => 'getCanMarkForDeletion',
		'can_move'              => 'getCanMove',
		'can_restore_version'   => 'getCanRestoreVersion',
		'can_view_preview'      => 'getCanViewPreview',
		'status_to_ref'         => 'getStatusToRef',
	];

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @return array
	 */
	public static function attributeMap() {
		return self::$attributeMap;
	}

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @return array
	 */
	public static function setters() {
		return self::$setters;
	}

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @return array
	 */
	public static function getters() {
		return self::$getters;
	}

	/**
	 * The original name of the model.
	 *
	 * @return string
	 */
	public function getModelName() {
		return self::$swaggerModelName;
	}





	/**
	 * Associative array for storing property values
	 *
	 * @var mixed[]
	 */
	protected $container = [];

	/**
	 * Constructor
	 *
	 * @param mixed[] $data Associated array of property values
	 *                      initializing the model
	 */
	public function __construct( array $data = null ) {
		$this->container['can_access_read_only']  = isset( $data['can_access_read_only'] ) ? $data['can_access_read_only'] : null;
		$this->container['can_change_assignment'] = isset( $data['can_change_assignment'] ) ? $data['can_change_assignment'] : null;
		$this->container['can_change_profile']    = isset( $data['can_change_profile'] ) ? $data['can_change_profile'] : null;
		$this->container['can_change_status']     = isset( $data['can_change_status'] ) ? $data['can_change_status'] : null;
		$this->container['can_check_out']         = isset( $data['can_check_out'] ) ? $data['can_check_out'] : null;
		$this->container['can_duplicate']         = isset( $data['can_duplicate'] ) ? $data['can_duplicate'] : null;
		$this->container['can_edit_metadata']     = isset( $data['can_edit_metadata'] ) ? $data['can_edit_metadata'] : null;
		$this->container['can_mark_for_deletion'] = isset( $data['can_mark_for_deletion'] ) ? $data['can_mark_for_deletion'] : null;
		$this->container['can_move']              = isset( $data['can_move'] ) ? $data['can_move'] : null;
		$this->container['can_restore_version']   = isset( $data['can_restore_version'] ) ? $data['can_restore_version'] : null;
		$this->container['can_view_preview']      = isset( $data['can_view_preview'] ) ? $data['can_view_preview'] : null;
		$this->container['status_to_ref']         = isset( $data['status_to_ref'] ) ? $data['status_to_ref'] : null;
	}

	/**
	 * Show all the invalid properties with reasons.
	 *
	 * @return array invalid properties with reasons
	 */
	public function listInvalidProperties() {
		$invalidProperties = [];

		return $invalidProperties;
	}

	/**
	 * Validate all the properties in the model
	 * return true if all passed
	 *
	 * @return bool True if all properties are valid
	 */
	public function valid() {

		return true;
	}


	/**
	 * Gets can_access_read_only
	 *
	 * @return bool
	 */
	public function getCanAccessReadOnly() {
		return $this->container['can_access_read_only'];
	}

	/**
	 * Sets can_access_read_only
	 *
	 * @param bool $can_access_read_only can_access_read_only
	 *
	 * @return $this
	 */
	public function setCanAccessReadOnly( $can_access_read_only ) {
		$this->container['can_access_read_only'] = $can_access_read_only;

		return $this;
	}

	/**
	 * Gets can_change_assignment
	 *
	 * @return bool
	 */
	public function getCanChangeAssignment() {
		return $this->container['can_change_assignment'];
	}

	/**
	 * Sets can_change_assignment
	 *
	 * @param bool $can_change_assignment can_change_assignment
	 *
	 * @return $this
	 */
	public function setCanChangeAssignment( $can_change_assignment ) {
		$this->container['can_change_assignment'] = $can_change_assignment;

		return $this;
	}

	/**
	 * Gets can_change_profile
	 *
	 * @return bool
	 */
	public function getCanChangeProfile() {
		return $this->container['can_change_profile'];
	}

	/**
	 * Sets can_change_profile
	 *
	 * @param bool $can_change_profile can_change_profile
	 *
	 * @return $this
	 */
	public function setCanChangeProfile( $can_change_profile ) {
		$this->container['can_change_profile'] = $can_change_profile;

		return $this;
	}

	/**
	 * Gets can_change_status
	 *
	 * @return bool
	 */
	public function getCanChangeStatus() {
		return $this->container['can_change_status'];
	}

	/**
	 * Sets can_change_status
	 *
	 * @param bool $can_change_status can_change_status
	 *
	 * @return $this
	 */
	public function setCanChangeStatus( $can_change_status ) {
		$this->container['can_change_status'] = $can_change_status;

		return $this;
	}

	/**
	 * Gets can_check_out
	 *
	 * @return bool
	 */
	public function getCanCheckOut() {
		return $this->container['can_check_out'];
	}

	/**
	 * Sets can_check_out
	 *
	 * @param bool $can_check_out can_check_out
	 *
	 * @return $this
	 */
	public function setCanCheckOut( $can_check_out ) {
		$this->container['can_check_out'] = $can_check_out;

		return $this;
	}

	/**
	 * Gets can_duplicate
	 *
	 * @return bool
	 */
	public function getCanDuplicate() {
		return $this->container['can_duplicate'];
	}

	/**
	 * Sets can_duplicate
	 *
	 * @param bool $can_duplicate can_duplicate
	 *
	 * @return $this
	 */
	public function setCanDuplicate( $can_duplicate ) {
		$this->container['can_duplicate'] = $can_duplicate;

		return $this;
	}

	/**
	 * Gets can_edit_metadata
	 *
	 * @return bool
	 */
	public function getCanEditMetadata() {
		return $this->container['can_edit_metadata'];
	}

	/**
	 * Sets can_edit_metadata
	 *
	 * @param bool $can_edit_metadata can_edit_metadata
	 *
	 * @return $this
	 */
	public function setCanEditMetadata( $can_edit_metadata ) {
		$this->container['can_edit_metadata'] = $can_edit_metadata;

		return $this;
	}

	/**
	 * Gets can_mark_for_deletion
	 *
	 * @return bool
	 */
	public function getCanMarkForDeletion() {
		return $this->container['can_mark_for_deletion'];
	}

	/**
	 * Sets can_mark_for_deletion
	 *
	 * @param bool $can_mark_for_deletion can_mark_for_deletion
	 *
	 * @return $this
	 */
	public function setCanMarkForDeletion( $can_mark_for_deletion ) {
		$this->container['can_mark_for_deletion'] = $can_mark_for_deletion;

		return $this;
	}

	/**
	 * Gets can_move
	 *
	 * @return bool
	 */
	public function getCanMove() {
		return $this->container['can_move'];
	}

	/**
	 * Sets can_move
	 *
	 * @param bool $can_move can_move
	 *
	 * @return $this
	 */
	public function setCanMove( $can_move ) {
		$this->container['can_move'] = $can_move;

		return $this;
	}

	/**
	 * Gets can_restore_version
	 *
	 * @return bool
	 */
	public function getCanRestoreVersion() {
		return $this->container['can_restore_version'];
	}

	/**
	 * Sets can_restore_version
	 *
	 * @param bool $can_restore_version can_restore_version
	 *
	 * @return $this
	 */
	public function setCanRestoreVersion( $can_restore_version ) {
		$this->container['can_restore_version'] = $can_restore_version;

		return $this;
	}

	/**
	 * Gets can_view_preview
	 *
	 * @return bool
	 */
	public function getCanViewPreview() {
		return $this->container['can_view_preview'];
	}

	/**
	 * Sets can_view_preview
	 *
	 * @param bool $can_view_preview can_view_preview
	 *
	 * @return $this
	 */
	public function setCanViewPreview( $can_view_preview ) {
		$this->container['can_view_preview'] = $can_view_preview;

		return $this;
	}

	/**
	 * Gets status_to_ref
	 *
	 * @return \Swagger\Client\Model\ReferenceTO
	 */
	public function getStatusToRef() {
		return $this->container['status_to_ref'];
	}

	/**
	 * Sets status_to_ref
	 *
	 * @param \Swagger\Client\Model\ReferenceTO $status_to_ref status_to_ref
	 *
	 * @return $this
	 */
	public function setStatusToRef( $status_to_ref ) {
		$this->container['status_to_ref'] = $status_to_ref;

		return $this;
	}
	/**
	 * Returns true if offset exists. False otherwise.
	 *
	 * @param integer $offset Offset
	 *
	 * @return boolean
	 */
	public function offsetExists( $offset ) {
		return isset( $this->container[ $offset ] );
	}

	/**
	 * Gets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return mixed
	 */
	public function offsetGet( $offset ) {
		return isset( $this->container[ $offset ] ) ? $this->container[ $offset ] : null;
	}

	/**
	 * Sets value based on offset.
	 *
	 * @param integer $offset Offset
	 * @param mixed   $value  Value to be set
	 *
	 * @return void
	 */
	public function offsetSet( $offset, $value ) {
		if ( is_null( $offset ) ) {
			$this->container[] = $value;
		} else {
			$this->container[ $offset ] = $value;
		}
	}

	/**
	 * Unsets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return void
	 */
	public function offsetUnset( $offset ) {
		unset( $this->container[ $offset ] );
	}

	/**
	 * Gets the string presentation of the object
	 *
	 * @return string
	 */
	public function __toString() {
		if ( ! function_exists( 'wp_json_encode' ) ) {
			require_once ABSPATH . WPINC . '/functions.php';
		}
		if ( defined( 'JSON_PRETTY_PRINT' ) ) { // use JSON pretty print
			return wp_json_encode(
				ObjectSerializer::sanitizeForSerialization( $this ),
				JSON_PRETTY_PRINT
			);
		}

		return wp_json_encode( ObjectSerializer::sanitizeForSerialization( $this ) );
	}
}


