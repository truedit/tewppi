<?php
/**
 * SessionInfoTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TruEdit REST API
 *
 * Welcome to the TruEdit Platform REST API Reference! You can use this REST API to develop integrations between TruEdit and other applications or script interactions with TruEdit.
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SessionInfoTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionInfoTO implements ModelInterface, ArrayAccess {

	const DISCRIMINATOR = null;

	/**
	  * The original name of the model.
	  *
	  * @var string
	  */
	protected static $swaggerModelName = 'SessionInfoTO';

	/**
	  * Array of property to type mappings. Used for (de)serialization
	  *
	  * @var string[]
	  */
	protected static $swaggerTypes = [
		'display_user_name'  => 'string',
		'dont_notify_user'   => 'bool',
		'htmleditor_enabled' => 'bool',
		'overview_enabled'   => 'bool',
		'privileges'         => 'string[]',
		'server_time'        => 'string',
		'status_rights'      => '\Swagger\Client\Model\StatusRightsTO[]',
		'tenant_id'          => 'string',
		'tenant_name'        => 'string',
		'user_id'            => 'string',
		'user_name'          => 'string',
	];

	/**
	  * Array of property to format mappings. Used for (de)serialization
	  *
	  * @var string[]
	  */
	protected static $swaggerFormats = [
		'display_user_name'  => null,
		'dont_notify_user'   => null,
		'htmleditor_enabled' => null,
		'overview_enabled'   => null,
		'privileges'         => null,
		'server_time'        => null,
		'status_rights'      => null,
		'tenant_id'          => null,
		'tenant_name'        => null,
		'user_id'            => null,
		'user_name'          => null,
	];

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function swaggerTypes() {
		return self::$swaggerTypes;
	}

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function swaggerFormats() {
		return self::$swaggerFormats;
	}

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @var string[]
	 */
	protected static $attributeMap = [
		'display_user_name'  => 'displayUserName',
		'dont_notify_user'   => 'dontNotifyUser',
		'htmleditor_enabled' => 'htmleditorEnabled',
		'overview_enabled'   => 'overviewEnabled',
		'privileges'         => 'privileges',
		'server_time'        => 'serverTime',
		'status_rights'      => 'statusRights',
		'tenant_id'          => 'tenantID',
		'tenant_name'        => 'tenantName',
		'user_id'            => 'userID',
		'user_name'          => 'userName',
	];

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @var string[]
	 */
	protected static $setters = [
		'display_user_name'  => 'setDisplayUserName',
		'dont_notify_user'   => 'setDontNotifyUser',
		'htmleditor_enabled' => 'setHtmleditorEnabled',
		'overview_enabled'   => 'setOverviewEnabled',
		'privileges'         => 'setPrivileges',
		'server_time'        => 'setServerTime',
		'status_rights'      => 'setStatusRights',
		'tenant_id'          => 'setTenantId',
		'tenant_name'        => 'setTenantName',
		'user_id'            => 'setUserId',
		'user_name'          => 'setUserName',
	];

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @var string[]
	 */
	protected static $getters = [
		'display_user_name'  => 'getDisplayUserName',
		'dont_notify_user'   => 'getDontNotifyUser',
		'htmleditor_enabled' => 'getHtmleditorEnabled',
		'overview_enabled'   => 'getOverviewEnabled',
		'privileges'         => 'getPrivileges',
		'server_time'        => 'getServerTime',
		'status_rights'      => 'getStatusRights',
		'tenant_id'          => 'getTenantId',
		'tenant_name'        => 'getTenantName',
		'user_id'            => 'getUserId',
		'user_name'          => 'getUserName',
	];

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @return array
	 */
	public static function attributeMap() {
		return self::$attributeMap;
	}

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @return array
	 */
	public static function setters() {
		return self::$setters;
	}

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @return array
	 */
	public static function getters() {
		return self::$getters;
	}

	/**
	 * The original name of the model.
	 *
	 * @return string
	 */
	public function getModelName() {
		return self::$swaggerModelName;
	}





	/**
	 * Associative array for storing property values
	 *
	 * @var mixed[]
	 */
	protected $container = [];

	/**
	 * Constructor
	 *
	 * @param mixed[] $data Associated array of property values
	 *                      initializing the model
	 */
	public function __construct( array $data = null ) {
		$this->container['display_user_name']  = isset( $data['display_user_name'] ) ? $data['display_user_name'] : null;
		$this->container['dont_notify_user']   = isset( $data['dont_notify_user'] ) ? $data['dont_notify_user'] : null;
		$this->container['htmleditor_enabled'] = isset( $data['htmleditor_enabled'] ) ? $data['htmleditor_enabled'] : null;
		$this->container['overview_enabled']   = isset( $data['overview_enabled'] ) ? $data['overview_enabled'] : null;
		$this->container['privileges']         = isset( $data['privileges'] ) ? $data['privileges'] : null;
		$this->container['server_time']        = isset( $data['server_time'] ) ? $data['server_time'] : null;
		$this->container['status_rights']      = isset( $data['status_rights'] ) ? $data['status_rights'] : null;
		$this->container['tenant_id']          = isset( $data['tenant_id'] ) ? $data['tenant_id'] : null;
		$this->container['tenant_name']        = isset( $data['tenant_name'] ) ? $data['tenant_name'] : null;
		$this->container['user_id']            = isset( $data['user_id'] ) ? $data['user_id'] : null;
		$this->container['user_name']          = isset( $data['user_name'] ) ? $data['user_name'] : null;
	}

	/**
	 * Show all the invalid properties with reasons.
	 *
	 * @return array invalid properties with reasons
	 */
	public function listInvalidProperties() {
		$invalidProperties = [];

		return $invalidProperties;
	}

	/**
	 * Validate all the properties in the model
	 * return true if all passed
	 *
	 * @return bool True if all properties are valid
	 */
	public function valid() {

		return true;
	}


	/**
	 * Gets display_user_name
	 *
	 * @return string
	 */
	public function getDisplayUserName() {
		return $this->container['display_user_name'];
	}

	/**
	 * Sets display_user_name
	 *
	 * @param string $display_user_name display_user_name
	 *
	 * @return $this
	 */
	public function setDisplayUserName( $display_user_name ) {
		$this->container['display_user_name'] = $display_user_name;

		return $this;
	}

	/**
	 * Gets dont_notify_user
	 *
	 * @return bool
	 */
	public function getDontNotifyUser() {
		return $this->container['dont_notify_user'];
	}

	/**
	 * Sets dont_notify_user
	 *
	 * @param bool $dont_notify_user dont_notify_user
	 *
	 * @return $this
	 */
	public function setDontNotifyUser( $dont_notify_user ) {
		$this->container['dont_notify_user'] = $dont_notify_user;

		return $this;
	}

	/**
	 * Gets htmleditor_enabled
	 *
	 * @return bool
	 */
	public function getHtmleditorEnabled() {
		return $this->container['htmleditor_enabled'];
	}

	/**
	 * Sets htmleditor_enabled
	 *
	 * @param bool $htmleditor_enabled htmleditor_enabled
	 *
	 * @return $this
	 */
	public function setHtmleditorEnabled( $htmleditor_enabled ) {
		$this->container['htmleditor_enabled'] = $htmleditor_enabled;

		return $this;
	}

	/**
	 * Gets overview_enabled
	 *
	 * @return bool
	 */
	public function getOverviewEnabled() {
		return $this->container['overview_enabled'];
	}

	/**
	 * Sets overview_enabled
	 *
	 * @param bool $overview_enabled overview_enabled
	 *
	 * @return $this
	 */
	public function setOverviewEnabled( $overview_enabled ) {
		$this->container['overview_enabled'] = $overview_enabled;

		return $this;
	}

	/**
	 * Gets privileges
	 *
	 * @return string[]
	 */
	public function getPrivileges() {
		return $this->container['privileges'];
	}

	/**
	 * Sets privileges
	 *
	 * @param string[] $privileges privileges
	 *
	 * @return $this
	 */
	public function setPrivileges( $privileges ) {
		$this->container['privileges'] = $privileges;

		return $this;
	}

	/**
	 * Gets server_time
	 *
	 * @return string
	 */
	public function getServerTime() {
		return $this->container['server_time'];
	}

	/**
	 * Sets server_time
	 *
	 * @param string $server_time server_time
	 *
	 * @return $this
	 */
	public function setServerTime( $server_time ) {
		$this->container['server_time'] = $server_time;

		return $this;
	}

	/**
	 * Gets status_rights
	 *
	 * @return \Swagger\Client\Model\StatusRightsTO[]
	 */
	public function getStatusRights() {
		return $this->container['status_rights'];
	}

	/**
	 * Sets status_rights
	 *
	 * @param \Swagger\Client\Model\StatusRightsTO[] $status_rights status_rights
	 *
	 * @return $this
	 */
	public function setStatusRights( $status_rights ) {
		$this->container['status_rights'] = $status_rights;

		return $this;
	}

	/**
	 * Gets tenant_id
	 *
	 * @return string
	 */
	public function getTenantId() {
		return $this->container['tenant_id'];
	}

	/**
	 * Sets tenant_id
	 *
	 * @param string $tenant_id tenant_id
	 *
	 * @return $this
	 */
	public function setTenantId( $tenant_id ) {
		$this->container['tenant_id'] = $tenant_id;

		return $this;
	}

	/**
	 * Gets tenant_name
	 *
	 * @return string
	 */
	public function getTenantName() {
		return $this->container['tenant_name'];
	}

	/**
	 * Sets tenant_name
	 *
	 * @param string $tenant_name tenant_name
	 *
	 * @return $this
	 */
	public function setTenantName( $tenant_name ) {
		$this->container['tenant_name'] = $tenant_name;

		return $this;
	}

	/**
	 * Gets user_id
	 *
	 * @return string
	 */
	public function getUserId() {
		return $this->container['user_id'];
	}

	/**
	 * Sets user_id
	 *
	 * @param string $user_id user_id
	 *
	 * @return $this
	 */
	public function setUserId( $user_id ) {
		$this->container['user_id'] = $user_id;

		return $this;
	}

	/**
	 * Gets user_name
	 *
	 * @return string
	 */
	public function getUserName() {
		return $this->container['user_name'];
	}

	/**
	 * Sets user_name
	 *
	 * @param string $user_name user_name
	 *
	 * @return $this
	 */
	public function setUserName( $user_name ) {
		$this->container['user_name'] = $user_name;

		return $this;
	}
	/**
	 * Returns true if offset exists. False otherwise.
	 *
	 * @param integer $offset Offset
	 *
	 * @return boolean
	 */
	public function offsetExists( $offset ) {
		return isset( $this->container[ $offset ] );
	}

	/**
	 * Gets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return mixed
	 */
	public function offsetGet( $offset ) {
		return isset( $this->container[ $offset ] ) ? $this->container[ $offset ] : null;
	}

	/**
	 * Sets value based on offset.
	 *
	 * @param integer $offset Offset
	 * @param mixed   $value  Value to be set
	 *
	 * @return void
	 */
	public function offsetSet( $offset, $value ) {
		if ( is_null( $offset ) ) {
			$this->container[] = $value;
		} else {
			$this->container[ $offset ] = $value;
		}
	}

	/**
	 * Unsets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return void
	 */
	public function offsetUnset( $offset ) {
		unset( $this->container[ $offset ] );
	}

	/**
	 * Gets the string presentation of the object
	 *
	 * @return string
	 */
	public function __toString() {
		if ( ! function_exists( 'wp_json_encode' ) ) {
			require_once ABSPATH . WPINC . '/functions.php';
		}
		if ( defined( 'JSON_PRETTY_PRINT' ) ) { // use JSON pretty print
			return wp_json_encode(
				ObjectSerializer::sanitizeForSerialization( $this ),
				JSON_PRETTY_PRINT
			);
		}

		return wp_json_encode( ObjectSerializer::sanitizeForSerialization( $this ) );
	}
}


