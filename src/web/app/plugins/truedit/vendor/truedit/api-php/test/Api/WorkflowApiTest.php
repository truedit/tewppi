<?php
/**
 * WorkflowApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TruEdit REST API
 *
 * Welcome to the TruEdit Platform REST API Reference! You can use this REST API to develop integrations between TruEdit and other applications or script interactions with TruEdit.
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * WorkflowApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkflowApiTest extends \PHPUnit_Framework_TestCase {


	/**
	 * Setup before running any test cases
	 */
	public static function setUpBeforeClass() {
	}

	/**
	 * Setup before running each test case
	 */
	public function setUp() {
	}

	/**
	 * Clean up after running each test case
	 */
	public function tearDown() {
	}

	/**
	 * Clean up after running all test cases
	 */
	public static function tearDownAfterClass() {
	}

	/**
	 * Test case for createNewWorkflowsUsingPOST
	 *
	 * Create one or more Workflows.
	 *
	 */
	public function testCreateNewWorkflowsUsingPOST() {
	}

	/**
	 * Test case for createTransitionsUsingPOST
	 *
	 * Create Transitions of one specified Applied Status of a specified Workflow..
	 *
	 */
	public function testCreateTransitionsUsingPOST() {
	}

	/**
	 * Test case for createWorkstepsUsingPOST
	 *
	 * Create one or more Applied Statuses in a specified Workflow.
	 *
	 */
	public function testCreateWorkstepsUsingPOST() {
	}

	/**
	 * Test case for deleteOneTransitionUsingDELETE
	 *
	 * Delete one Transition of one specified Applied Status of a specified Workflow..
	 *
	 */
	public function testDeleteOneTransitionUsingDELETE() {
	}

	/**
	 * Test case for deleteOneWorkstepUsingDELETE
	 *
	 * Delete one Applied Status in a specified Workflow.
	 *
	 */
	public function testDeleteOneWorkstepUsingDELETE() {
	}

	/**
	 * Test case for fetchAllWorkflowsUsingGET
	 *
	 * Fetch all available Workflow objects.
	 *
	 */
	public function testFetchAllWorkflowsUsingGET() {
	}

	/**
	 * Test case for fetchAppliedStatusesOfWorkflowUsingGET
	 *
	 * Fetch the Applied Status objects that belong to a specified Workflow..
	 *
	 */
	public function testFetchAppliedStatusesOfWorkflowUsingGET() {
	}

	/**
	 * Test case for fetchOneAppliedStatusOfWorkflowUsingGET
	 *
	 * Fetch one Applied Status object that belongs to a specified Workflow, specified by Status ID..
	 *
	 */
	public function testFetchOneAppliedStatusOfWorkflowUsingGET() {
	}

	/**
	 * Test case for fetchOneTransitionUsingGET
	 *
	 * Fetch one Transition of one specified Applied Status of a specified Workflow..
	 *
	 */
	public function testFetchOneTransitionUsingGET() {
	}

	/**
	 * Test case for fetchOneWorkflowUsingGET
	 *
	 * Fetch a single Workflow object.
	 *
	 */
	public function testFetchOneWorkflowUsingGET() {
	}

	/**
	 * Test case for fetchTransitionsOfOneAppliedStatusUsingGET
	 *
	 * Fetch the Transitions from one specified Applied Status of a specified Workflow..
	 *
	 */
	public function testFetchTransitionsOfOneAppliedStatusUsingGET() {
	}

	/**
	 * Test case for updateOneWorkflowUsingPUT
	 *
	 * Update one Workflow.
	 *
	 */
	public function testUpdateOneWorkflowUsingPUT() {
	}

	/**
	 * Test case for updateOneWorkstepUsingPUT
	 *
	 * Update one Applied Status in a specified Workflow.
	 *
	 */
	public function testUpdateOneWorkstepUsingPUT() {
	}
}
