<?php
/**
 * TargetMediaApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TruEdit REST API
 *
 * Welcome to the TruEdit Platform REST API Reference! You can use this REST API to develop integrations between TruEdit and other applications or script interactions with TruEdit.
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TargetMediaApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TargetMediaApi {

	/**
	 * @var ClientInterface
	 */
	protected $client;

	/**
	 * @var Configuration
	 */
	protected $config;

	/**
	 * @param ClientInterface $client
	 * @param Configuration   $config
	 * @param HeaderSelector  $selector
	 */
	public function __construct(
		ClientInterface $client = null,
		Configuration $config = null,
		HeaderSelector $selector = null
	) {
		$this->client         = $client ?: new Client();
		$this->config         = $config ?: new Configuration();
		$this->headerSelector = $selector ?: new HeaderSelector();
	}

	/**
	 * @return Configuration
	 */
	public function getConfig() {
		return $this->config;
	}

	/**
	 * Operation createNewUsingPOST1
	 *
	 * Create one or more Target Media
	 *
	 * @param  \Swagger\Client\Model\TargetMediaV1ListTO $new_media newMedia (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_
	 */
	public function createNewUsingPOST1( $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->createNewUsingPOST1WithHttpInfo( $new_media, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation createNewUsingPOST1WithHttpInfo
	 *
	 * Create one or more Target Media
	 *
	 * @param  \Swagger\Client\Model\TargetMediaV1ListTO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function createNewUsingPOST1WithHttpInfo( $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_';
		$request    = $this->createNewUsingPOST1Request( $new_media, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation createNewUsingPOST1Async
	 *
	 * Create one or more Target Media
	 *
	 * @param  \Swagger\Client\Model\TargetMediaV1ListTO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function createNewUsingPOST1Async( $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->createNewUsingPOST1AsyncWithHttpInfo( $new_media, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation createNewUsingPOST1AsyncWithHttpInfo
	 *
	 * Create one or more Target Media
	 *
	 * @param  \Swagger\Client\Model\TargetMediaV1ListTO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function createNewUsingPOST1AsyncWithHttpInfo( $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_';
		$request    = $this->createNewUsingPOST1Request( $new_media, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'createNewUsingPOST1'
	 *
	 * @param  \Swagger\Client\Model\TargetMediaV1ListTO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function createNewUsingPOST1Request( $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'new_media' is set
		if ( $new_media === null ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $new_media when calling createNewUsingPOST1'
			);
		}

		$resourcePath = '/1/targetMedia';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_tempBody = null;
		if ( isset( $new_media ) ) {
			$_tempBody = $new_media;
		}

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[ 'application/json' ]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'POST',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation deleteOneUsingDELETE1
	 *
	 * Delete a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResponseMessage
	 */
	public function deleteOneUsingDELETE1( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->deleteOneUsingDELETE1WithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation deleteOneUsingDELETE1WithHttpInfo
	 *
	 * Delete a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
	 */
	public function deleteOneUsingDELETE1WithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResponseMessage';
		$request    = $this->deleteOneUsingDELETE1Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResponseMessage',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation deleteOneUsingDELETE1Async
	 *
	 * Delete a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteOneUsingDELETE1Async( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->deleteOneUsingDELETE1AsyncWithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation deleteOneUsingDELETE1AsyncWithHttpInfo
	 *
	 * Delete a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteOneUsingDELETE1AsyncWithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResponseMessage';
		$request    = $this->deleteOneUsingDELETE1Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'deleteOneUsingDELETE1'
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function deleteOneUsingDELETE1Request( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( $id === null ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling deleteOneUsingDELETE1'
			);
		}

		$resourcePath = '/1/targetMedia/{id}';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( $id !== null ) {
			$resourcePath = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'DELETE',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation fetchAllUsingGET6
	 *
	 * Fetch all available Target Media objects.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 * @param  \DateTime $if_modified_since if_modified_since (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_
	 */
	public function fetchAllUsingGET6( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null ) {
		list($response) = $this->fetchAllUsingGET6WithHttpInfo( $minimal, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language, $if_modified_since );
		return $response;
	}

	/**
	 * Operation fetchAllUsingGET6WithHttpInfo
	 *
	 * Fetch all available Target Media objects.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 * @param  \DateTime $if_modified_since (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchAllUsingGET6WithHttpInfo( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_';
		$request    = $this->fetchAllUsingGET6Request( $minimal, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language, $if_modified_since );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchAllUsingGET6Async
	 *
	 * Fetch all available Target Media objects.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 * @param  \DateTime $if_modified_since (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchAllUsingGET6Async( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null ) {
		return $this->fetchAllUsingGET6AsyncWithHttpInfo( $minimal, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language, $if_modified_since )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchAllUsingGET6AsyncWithHttpInfo
	 *
	 * Fetch all available Target Media objects.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 * @param  \DateTime $if_modified_since (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchAllUsingGET6AsyncWithHttpInfo( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseTargetMediaV1TO_';
		$request    = $this->fetchAllUsingGET6Request( $minimal, $page_number, $page_size, $order_by, $x_api_key, $x_app_api_key, $accept_language, $if_modified_since );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchAllUsingGET6'
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 * @param  \DateTime $if_modified_since (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchAllUsingGET6Request( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $x_api_key = null, $x_app_api_key = null, $accept_language = null, $if_modified_since = null ) {

		$resourcePath = '/1/targetMedia';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// query params
		if ( $minimal !== null ) {
			$queryParams['minimal'] = ObjectSerializer::toQueryValue( $minimal );
		}
		// query params
		if ( $page_number !== null ) {
			$queryParams['pageNumber'] = ObjectSerializer::toQueryValue( $page_number );
		}
		// query params
		if ( $page_size !== null ) {
			$queryParams['pageSize'] = ObjectSerializer::toQueryValue( $page_size );
		}
		// query params
		if ( is_array( $order_by ) ) {
			$order_by = ObjectSerializer::serializeCollection( $order_by, 'multi', true );
		}
		if ( $order_by !== null ) {
			$queryParams['orderBy'] = ObjectSerializer::toQueryValue( $order_by );
		}
		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}
		// header params
		if ( $if_modified_since !== null ) {
			$headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue( $if_modified_since );
		}

		// body params
		$_tempBody = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation fetchIntentValuesUsingGET
	 *
	 * Fetches all Target Media Intent values
	 *
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_
	 */
	public function fetchIntentValuesUsingGET( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchIntentValuesUsingGETWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchIntentValuesUsingGETWithHttpInfo
	 *
	 * Fetches all Target Media Intent values
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchIntentValuesUsingGETWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request    = $this->fetchIntentValuesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchIntentValuesUsingGETAsync
	 *
	 * Fetches all Target Media Intent values
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchIntentValuesUsingGETAsync( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchIntentValuesUsingGETAsyncWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchIntentValuesUsingGETAsyncWithHttpInfo
	 *
	 * Fetches all Target Media Intent values
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchIntentValuesUsingGETAsyncWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request    = $this->fetchIntentValuesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchIntentValuesUsingGET'
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchIntentValuesUsingGETRequest( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {

		$resourcePath = '/1/targetMedia/intent';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_tempBody = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation fetchOneUsingGET2
	 *
	 * Fetch a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_
	 */
	public function fetchOneUsingGET2( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchOneUsingGET2WithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchOneUsingGET2WithHttpInfo
	 *
	 * Fetch a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchOneUsingGET2WithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_';
		$request    = $this->fetchOneUsingGET2Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchOneUsingGET2Async
	 *
	 * Fetch a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchOneUsingGET2Async( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchOneUsingGET2AsyncWithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchOneUsingGET2AsyncWithHttpInfo
	 *
	 * Fetch a single Target Media object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchOneUsingGET2AsyncWithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_';
		$request    = $this->fetchOneUsingGET2Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchOneUsingGET2'
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchOneUsingGET2Request( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( $id === null ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling fetchOneUsingGET2'
			);
		}

		$resourcePath = '/1/targetMedia/{id}';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( $id !== null ) {
			$resourcePath = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation fetchOrientationValuesUsingGET
	 *
	 * Fetches all Target Media Orientation values
	 *
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_
	 */
	public function fetchOrientationValuesUsingGET( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchOrientationValuesUsingGETWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchOrientationValuesUsingGETWithHttpInfo
	 *
	 * Fetches all Target Media Orientation values
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchOrientationValuesUsingGETWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request    = $this->fetchOrientationValuesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchOrientationValuesUsingGETAsync
	 *
	 * Fetches all Target Media Orientation values
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchOrientationValuesUsingGETAsync( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchOrientationValuesUsingGETAsyncWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchOrientationValuesUsingGETAsyncWithHttpInfo
	 *
	 * Fetches all Target Media Orientation values
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchOrientationValuesUsingGETAsyncWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request    = $this->fetchOrientationValuesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchOrientationValuesUsingGET'
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchOrientationValuesUsingGETRequest( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {

		$resourcePath = '/1/targetMedia/orientation';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_tempBody = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'GET',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Operation updateOneUsingPUT1
	 *
	 * Update one Target Media
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\TargetMediaV1TO $new_media newMedia (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_
	 */
	public function updateOneUsingPUT1( $id, $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->updateOneUsingPUT1WithHttpInfo( $id, $new_media, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation updateOneUsingPUT1WithHttpInfo
	 *
	 * Update one Target Media
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\TargetMediaV1TO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function updateOneUsingPUT1WithHttpInfo( $id, $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_';
		$request    = $this->updateOneUsingPUT1Request( $id, $new_media, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$statusCode = $response->getStatusCode();

			if ( $statusCode < 200 || $statusCode > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$statusCode,
						$request->getUri()
					),
					$statusCode,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$responseBody = $response->getBody();
			if ( $returnType === '\SplFileObject' ) {
				$content = $responseBody; //stream goes to serializer
			} else {
				$content = $responseBody->getContents();
				if ( $returnType !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $returnType, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation updateOneUsingPUT1Async
	 *
	 * Update one Target Media
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\TargetMediaV1TO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function updateOneUsingPUT1Async( $id, $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->updateOneUsingPUT1AsyncWithHttpInfo( $id, $new_media, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation updateOneUsingPUT1AsyncWithHttpInfo
	 *
	 * Update one Target Media
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\TargetMediaV1TO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function updateOneUsingPUT1AsyncWithHttpInfo( $id, $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$returnType = '\Swagger\Client\Model\API1SingleResultResponseTargetMediaV1TO_';
		$request    = $this->updateOneUsingPUT1Request( $id, $new_media, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $returnType ) {
					$responseBody = $response->getBody();
					if ( $returnType === '\SplFileObject' ) {
						$content = $responseBody; //stream goes to serializer
					} else {
						$content = $responseBody->getContents();
						if ( $returnType !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $returnType, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response   = $exception->getResponse();
					$statusCode = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$statusCode,
							$exception->getRequest()->getUri()
						),
						$statusCode,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'updateOneUsingPUT1'
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\TargetMediaV1TO $new_media newMedia (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function updateOneUsingPUT1Request( $id, $new_media, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( $id === null ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling updateOneUsingPUT1'
			);
		}
		// verify the required parameter 'new_media' is set
		if ( $new_media === null ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $new_media when calling updateOneUsingPUT1'
			);
		}

		$resourcePath = '/1/targetMedia/{id}';
		$formParams   = [];
		$queryParams  = [];
		$headerParams = [];
		$httpBody     = '';
		$multipart    = false;

		// header params
		if ( $x_api_key !== null ) {
			$headerParams['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( $x_app_api_key !== null ) {
			$headerParams['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( $accept_language !== null ) {
			$headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( $id !== null ) {
			$resourcePath = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resourcePath
			);
		}

		// body params
		$_tempBody = null;
		if ( isset( $new_media ) ) {
			$_tempBody = $new_media;
		}

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[ 'application/json' ]
			);
		}

		// for model (json/xml)
		if ( isset( $_tempBody ) ) {
			// $_tempBody is the method argument, if present
			$httpBody = $_tempBody;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $httpBody );
			}
		} elseif ( count( $formParams ) > 0 ) {
			if ( $multipart ) {
				$multipartContents = [];
				foreach ( $formParams as $formParamName => $formParamValue ) {
					$multipartContents[] = [
						'name'     => $formParamName,
						'contents' => $formParamValue,
					];
				}
				// for HTTP post (form)
				$httpBody = new MultipartStream( $multipartContents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$httpBody = \GuzzleHttp\json_encode( $formParams );

			} else {
				// for HTTP post (form)
				$httpBody = \GuzzleHttp\Psr7\build_query( $formParams );
			}
		}

		$defaultHeaders = [];
		if ( $this->config->getUserAgent() ) {
			$defaultHeaders['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$defaultHeaders,
			$headerParams,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $queryParams );
		return new Request(
			'PUT',
			$this->config->getHost() . $resourcePath . ( $query ? "?{$query}" : '' ),
			$headers,
			$httpBody
		);
	}

	/**
	 * Create http client option
	 *
	 * @throws \RuntimeException on file opening failure
	 * @return array of http client options
	 */
	protected function createHttpClientOption() {
		$options = [];
		if ( $this->config->getDebug() ) {
			$options[ RequestOptions::DEBUG ] = fopen( $this->config->getDebugFile(), 'a' );
			if ( ! $options[ RequestOptions::DEBUG ] ) {
				throw new \RuntimeException( 'Failed to open the debug file: ' . $this->config->getDebugFile() );
			}
		}

		return $options;
	}
}
